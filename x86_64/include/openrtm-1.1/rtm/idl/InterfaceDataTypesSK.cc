// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "InterfaceDataTypes.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
RTC::ActArrayActuatorPos::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  index >>= _n;
  position >>= _n;

}

void
RTC::ActArrayActuatorPos::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::UShort&)index <<= _n;
  (::CORBA::Double&)position <<= _n;

}

void
RTC::ActArrayActuatorSpeed::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  index >>= _n;
  speed >>= _n;

}

void
RTC::ActArrayActuatorSpeed::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::UShort&)index <<= _n;
  (::CORBA::Double&)speed <<= _n;

}

void
RTC::ActArrayActuatorCurrent::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  index >>= _n;
  current >>= _n;

}

void
RTC::ActArrayActuatorCurrent::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::UShort&)index <<= _n;
  (::CORBA::Double&)current <<= _n;

}

void
RTC::Actuator::operator>>= (cdrStream &_n) const
{
  position >>= _n;
  speed >>= _n;
  accel >>= _n;
  current >>= _n;
  status >>= _n;

}

void
RTC::Actuator::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)position <<= _n;
  (::CORBA::Double&)speed <<= _n;
  (::CORBA::Double&)accel <<= _n;
  (::CORBA::Double&)current <<= _n;
  (ActArrayActuatorStatus&)status <<= _n;

}

void
RTC::ActArrayState::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const ActuatorList&) actuators >>= _n;

}

void
RTC::ActArrayState::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (ActuatorList&)actuators <<= _n;

}

void
RTC::ActArrayActuatorGeometry::operator>>= (cdrStream &_n) const
{
  type >>= _n;
  length >>= _n;
  (const Orientation3D&) orientation >>= _n;
  (const Vector3D&) axis >>= _n;
  minRange >>= _n;
  centre >>= _n;
  maxRange >>= _n;
  homePosition >>= _n;
  _n.marshalBoolean(hasBrakes);

}

void
RTC::ActArrayActuatorGeometry::operator<<= (cdrStream &_n)
{
  (ActArrayActuatorType&)type <<= _n;
  (::CORBA::Double&)length <<= _n;
  (Orientation3D&)orientation <<= _n;
  (Vector3D&)axis <<= _n;
  (::CORBA::Double&)minRange <<= _n;
  (::CORBA::Double&)centre <<= _n;
  (::CORBA::Double&)maxRange <<= _n;
  (::CORBA::Double&)homePosition <<= _n;
  hasBrakes = _n.unmarshalBoolean();

}

void
RTC::ActArrayGeometry::operator>>= (cdrStream &_n) const
{
  (const Geometry3D&) arrayGeometry >>= _n;
  (const ActArrayActuatorGeometryList&) actuatorGeometry >>= _n;

}

void
RTC::ActArrayGeometry::operator<<= (cdrStream &_n)
{
  (Geometry3D&)arrayGeometry <<= _n;
  (ActArrayActuatorGeometryList&)actuatorGeometry <<= _n;

}

void
RTC::BumperGeometry::operator>>= (cdrStream &_n) const
{
  (const Pose3D&) pose >>= _n;
  (const Size3D&) size >>= _n;
  roc >>= _n;

}

void
RTC::BumperGeometry::operator<<= (cdrStream &_n)
{
  (Pose3D&)pose <<= _n;
  (Size3D&)size <<= _n;
  (::CORBA::Double&)roc <<= _n;

}

void
RTC::BumperArrayGeometry::operator>>= (cdrStream &_n) const
{
  (const Geometry3D&) arrayGeometry >>= _n;
  (const BumperGeometryList&) bumperGeometry >>= _n;

}

void
RTC::BumperArrayGeometry::operator<<= (cdrStream &_n)
{
  (Geometry3D&)arrayGeometry <<= _n;
  (BumperGeometryList&)bumperGeometry <<= _n;

}

void
RTC::CameraImage::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  width >>= _n;
  height >>= _n;
  bpp >>= _n;
  _n.marshalString(format,0);
  fDiv >>= _n;
  (const _CORBA_Unbounded_Sequence_Octet&) pixels >>= _n;

}

void
RTC::CameraImage::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::UShort&)width <<= _n;
  (::CORBA::UShort&)height <<= _n;
  (::CORBA::UShort&)bpp <<= _n;
  format = _n.unmarshalString(0);
  (::CORBA::Double&)fDiv <<= _n;
  (_CORBA_Unbounded_Sequence_Octet&)pixels <<= _n;

}

void
RTC::CameraInfo::operator>>= (cdrStream &_n) const
{
  (const Vector2D&) focalLength >>= _n;
  (const Point2D&) principalPoint >>= _n;
  k1 >>= _n;
  k2 >>= _n;
  p1 >>= _n;
  p2 >>= _n;

}

void
RTC::CameraInfo::operator<<= (cdrStream &_n)
{
  (Vector2D&)focalLength <<= _n;
  (Point2D&)principalPoint <<= _n;
  (::CORBA::Double&)k1 <<= _n;
  (::CORBA::Double&)k2 <<= _n;
  (::CORBA::Double&)p1 <<= _n;
  (::CORBA::Double&)p2 <<= _n;

}

void
RTC::FiducialInfo::operator>>= (cdrStream &_n) const
{
  id >>= _n;
  (const Pose3D&) pose >>= _n;
  (const Pose3D&) poseUncertainty >>= _n;
  (const Size3D&) size >>= _n;
  (const Size3D&) sizeUncertainty >>= _n;

}

void
RTC::FiducialInfo::operator<<= (cdrStream &_n)
{
  (::CORBA::ULong&)id <<= _n;
  (Pose3D&)pose <<= _n;
  (Pose3D&)poseUncertainty <<= _n;
  (Size3D&)size <<= _n;
  (Size3D&)sizeUncertainty <<= _n;

}

void
RTC::Fiducials::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const FiducialInfoList&) fiducialsList >>= _n;

}

void
RTC::Fiducials::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (FiducialInfoList&)fiducialsList <<= _n;

}

void
RTC::FiducialFOV::operator>>= (cdrStream &_n) const
{
  minRange >>= _n;
  maxRange >>= _n;
  viewAngle >>= _n;

}

void
RTC::FiducialFOV::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)minRange <<= _n;
  (::CORBA::Double&)maxRange <<= _n;
  (::CORBA::Double&)viewAngle <<= _n;

}

void
RTC::GPSTime::operator>>= (cdrStream &_n) const
{
  sec >>= _n;
  msec >>= _n;

}

void
RTC::GPSTime::operator<<= (cdrStream &_n)
{
  (::CORBA::ULong&)sec <<= _n;
  (::CORBA::ULong&)msec <<= _n;

}

void
RTC::GPSData::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const GPSTime&) timeFromGPS >>= _n;
  latitude >>= _n;
  longitude >>= _n;
  altitude >>= _n;
  horizontalError >>= _n;
  verticalError >>= _n;
  heading >>= _n;
  horizontalSpeed >>= _n;
  verticalSpeed >>= _n;
  numSatellites >>= _n;
  fixType >>= _n;

}

void
RTC::GPSData::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (GPSTime&)timeFromGPS <<= _n;
  (::CORBA::Double&)latitude <<= _n;
  (::CORBA::Double&)longitude <<= _n;
  (::CORBA::Double&)altitude <<= _n;
  (::CORBA::Double&)horizontalError <<= _n;
  (::CORBA::Double&)verticalError <<= _n;
  (::CORBA::Double&)heading <<= _n;
  (::CORBA::Double&)horizontalSpeed <<= _n;
  (::CORBA::Double&)verticalSpeed <<= _n;
  (::CORBA::UShort&)numSatellites <<= _n;
  (GPSFixType&)fixType <<= _n;

}

void
RTC::GripperState::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  status >>= _n;

}

void
RTC::GripperState::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (GripperStatus&)status <<= _n;

}

void
RTC::GripperGeometry::operator>>= (cdrStream &_n) const
{
  (const Geometry3D&) exterior >>= _n;
  (const Geometry3D&) interior >>= _n;

}

void
RTC::GripperGeometry::operator<<= (cdrStream &_n)
{
  (Geometry3D&)exterior <<= _n;
  (Geometry3D&)interior <<= _n;

}

void
RTC::INSData::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  latitude >>= _n;
  longitude >>= _n;
  altitude >>= _n;
  heightAMSL >>= _n;
  (const Velocity3D&) velocityENU >>= _n;
  (const Orientation3D&) orientation >>= _n;

}

void
RTC::INSData::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Double&)latitude <<= _n;
  (::CORBA::Double&)longitude <<= _n;
  (::CORBA::Double&)altitude <<= _n;
  (::CORBA::Double&)heightAMSL <<= _n;
  (Velocity3D&)velocityENU <<= _n;
  (Orientation3D&)orientation <<= _n;

}

void
RTC::LimbState::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const OAP&) oapMatrix >>= _n;
  status >>= _n;

}

void
RTC::LimbState::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (OAP&)oapMatrix <<= _n;
  (LimbStatus&)status <<= _n;

}

void
RTC::Hypothesis2D::operator>>= (cdrStream &_n) const
{
  (const Pose2D&) mean >>= _n;
  (const Covariance2D&) covariance >>= _n;
  weight >>= _n;

}

void
RTC::Hypothesis2D::operator<<= (cdrStream &_n)
{
  (Pose2D&)mean <<= _n;
  (Covariance2D&)covariance <<= _n;
  (::CORBA::Double&)weight <<= _n;

}

void
RTC::Hypotheses2D::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const Hypothesis2DList&) hypotheses >>= _n;

}

void
RTC::Hypotheses2D::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (Hypothesis2DList&)hypotheses <<= _n;

}

void
RTC::Hypothesis3D::operator>>= (cdrStream &_n) const
{
  (const Pose3D&) mean >>= _n;
  (const Covariance3D&) covariance >>= _n;
  weight >>= _n;

}

void
RTC::Hypothesis3D::operator<<= (cdrStream &_n)
{
  (Pose3D&)mean <<= _n;
  (Covariance3D&)covariance <<= _n;
  (::CORBA::Double&)weight <<= _n;

}

void
RTC::Hypotheses3D::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const Hypothesis3DList&) hypotheses >>= _n;

}

void
RTC::Hypotheses3D::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (Hypothesis3DList&)hypotheses <<= _n;

}

void
RTC::OGMapConfig::operator>>= (cdrStream &_n) const
{
  xScale >>= _n;
  yScale >>= _n;
  width >>= _n;
  height >>= _n;
  (const Pose2D&) origin >>= _n;

}

void
RTC::OGMapConfig::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)xScale <<= _n;
  (::CORBA::Double&)yScale <<= _n;
  (::CORBA::ULong&)width <<= _n;
  (::CORBA::ULong&)height <<= _n;
  (Pose2D&)origin <<= _n;

}

void
RTC::OGMapTile::operator>>= (cdrStream &_n) const
{
  column >>= _n;
  row >>= _n;
  width >>= _n;
  height >>= _n;
  (const OGMapCells&) cells >>= _n;

}

void
RTC::OGMapTile::operator<<= (cdrStream &_n)
{
  (::CORBA::ULong&)column <<= _n;
  (::CORBA::ULong&)row <<= _n;
  (::CORBA::ULong&)width <<= _n;
  (::CORBA::ULong&)height <<= _n;
  (OGMapCells&)cells <<= _n;

}

void
RTC::PointFeature::operator>>= (cdrStream &_n) const
{
  probability >>= _n;
  (const Point2D&) position >>= _n;
  (const PointCovariance2D&) covariance >>= _n;

}

void
RTC::PointFeature::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)probability <<= _n;
  (Point2D&)position <<= _n;
  (PointCovariance2D&)covariance <<= _n;

}

void
RTC::PoseFeature::operator>>= (cdrStream &_n) const
{
  probability >>= _n;
  (const Pose2D&) position >>= _n;
  (const Covariance2D&) covariance >>= _n;

}

void
RTC::PoseFeature::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)probability <<= _n;
  (Pose2D&)position <<= _n;
  (Covariance2D&)covariance <<= _n;

}

void
RTC::LineFeature::operator>>= (cdrStream &_n) const
{
  probability >>= _n;
  rho >>= _n;
  alpha >>= _n;
  (const PointCovariance2D&) covariance >>= _n;
  (const Point2D&) start >>= _n;
  (const Point2D&) end >>= _n;
  _n.marshalBoolean(startSighted);
  _n.marshalBoolean(endSighted);

}

void
RTC::LineFeature::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)probability <<= _n;
  (::CORBA::Double&)rho <<= _n;
  (::CORBA::Double&)alpha <<= _n;
  (PointCovariance2D&)covariance <<= _n;
  (Point2D&)start <<= _n;
  (Point2D&)end <<= _n;
  startSighted = _n.unmarshalBoolean();
  endSighted = _n.unmarshalBoolean();

}

void
RTC::Features::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const PointFeatureList&) pointFeatures >>= _n;
  (const PoseFeatureList&) poseFeatures >>= _n;
  (const LineFeatureList&) lineFeatures >>= _n;

}

void
RTC::Features::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (PointFeatureList&)pointFeatures <<= _n;
  (PoseFeatureList&)poseFeatures <<= _n;
  (LineFeatureList&)lineFeatures <<= _n;

}

void
RTC::MultiCameraImages::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const MulticameraImageList&) images >>= _n;

}

void
RTC::MultiCameraImages::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (MulticameraImageList&)images <<= _n;

}

void
RTC::MulticameraGeometry::operator>>= (cdrStream &_n) const
{
  (const Geometry3D&) geometry >>= _n;
  (const MulticameraGeometryList&) cameraGeometries >>= _n;

}

void
RTC::MulticameraGeometry::operator<<= (cdrStream &_n)
{
  (Geometry3D&)geometry <<= _n;
  (MulticameraGeometryList&)cameraGeometries <<= _n;

}

void
RTC::Waypoint2D::operator>>= (cdrStream &_n) const
{
  (const Pose2D&) target >>= _n;
  distanceTolerance >>= _n;
  headingTolerance >>= _n;
  (const Time&) timeLimit >>= _n;
  (const Velocity2D&) maxSpeed >>= _n;

}

void
RTC::Waypoint2D::operator<<= (cdrStream &_n)
{
  (Pose2D&)target <<= _n;
  (::CORBA::Double&)distanceTolerance <<= _n;
  (::CORBA::Double&)headingTolerance <<= _n;
  (Time&)timeLimit <<= _n;
  (Velocity2D&)maxSpeed <<= _n;

}

void
RTC::Path2D::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const Waypoint2DList&) waypoints >>= _n;

}

void
RTC::Path2D::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (Waypoint2DList&)waypoints <<= _n;

}

void
RTC::Waypoint3D::operator>>= (cdrStream &_n) const
{
  (const Pose3D&) target >>= _n;
  distanceTolerance >>= _n;
  headingTolerance >>= _n;
  (const Time&) timeLimit >>= _n;
  (const Velocity3D&) maxSpeed >>= _n;

}

void
RTC::Waypoint3D::operator<<= (cdrStream &_n)
{
  (Pose3D&)target <<= _n;
  (::CORBA::Double&)distanceTolerance <<= _n;
  (::CORBA::Double&)headingTolerance <<= _n;
  (Time&)timeLimit <<= _n;
  (Velocity3D&)maxSpeed <<= _n;

}

void
RTC::Path3D::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const Waypoint3DList&) waypoints >>= _n;

}

void
RTC::Path3D::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (Waypoint3DList&)waypoints <<= _n;

}

void
RTC::PointCloudPoint::operator>>= (cdrStream &_n) const
{
  (const Point3D&) point >>= _n;
  (const RGBColour&) colour >>= _n;

}

void
RTC::PointCloudPoint::operator<<= (cdrStream &_n)
{
  (Point3D&)point <<= _n;
  (RGBColour&)colour <<= _n;

}

void
RTC::PointCloud::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const PointCloudPointList&) points >>= _n;

}

void
RTC::PointCloud::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (PointCloudPointList&)points <<= _n;

}

void
RTC::PanTiltAngles::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  pan >>= _n;
  tilt >>= _n;

}

void
RTC::PanTiltAngles::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (::CORBA::Double&)pan <<= _n;
  (::CORBA::Double&)tilt <<= _n;

}

void
RTC::PanTiltState::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const PanTiltAngles&) angles >>= _n;
  panSpeed >>= _n;
  tiltSpeed >>= _n;

}

void
RTC::PanTiltState::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (PanTiltAngles&)angles <<= _n;
  (::CORBA::Double&)panSpeed <<= _n;
  (::CORBA::Double&)tiltSpeed <<= _n;

}

void
RTC::RangerGeometry::operator>>= (cdrStream &_n) const
{
  (const Geometry3D&) geometry >>= _n;
  (const ElementGeometryList&) elementGeometries >>= _n;

}

void
RTC::RangerGeometry::operator<<= (cdrStream &_n)
{
  (Geometry3D&)geometry <<= _n;
  (ElementGeometryList&)elementGeometries <<= _n;

}

void
RTC::RangerConfig::operator>>= (cdrStream &_n) const
{
  minAngle >>= _n;
  maxAngle >>= _n;
  angularRes >>= _n;
  minRange >>= _n;
  maxRange >>= _n;
  rangeRes >>= _n;
  frequency >>= _n;

}

void
RTC::RangerConfig::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)minAngle <<= _n;
  (::CORBA::Double&)maxAngle <<= _n;
  (::CORBA::Double&)angularRes <<= _n;
  (::CORBA::Double&)minRange <<= _n;
  (::CORBA::Double&)maxRange <<= _n;
  (::CORBA::Double&)rangeRes <<= _n;
  (::CORBA::Double&)frequency <<= _n;

}

void
RTC::RangeData::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const RangeList&) ranges >>= _n;
  (const RangerGeometry&) geometry >>= _n;
  (const RangerConfig&) config >>= _n;

}

void
RTC::RangeData::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (RangeList&)ranges <<= _n;
  (RangerGeometry&)geometry <<= _n;
  (RangerConfig&)config <<= _n;

}

void
RTC::IntensityData::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const IntensityList&) intensities >>= _n;
  (const RangerGeometry&) geometry >>= _n;
  (const RangerConfig&) config >>= _n;

}

void
RTC::IntensityData::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (IntensityList&)intensities <<= _n;
  (RangerGeometry&)geometry <<= _n;
  (RangerConfig&)config <<= _n;

}

