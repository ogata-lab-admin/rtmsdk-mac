// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "SDOPackage.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
SDOPackage::NameValue::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const ::CORBA::Any&) value >>= _n;

}

void
SDOPackage::NameValue::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (::CORBA::Any&)value <<= _n;

}

void
SDOPackage::Numeric::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case SHORT_TYPE:
      _pd_short_value >>= _n;
      break;
    case LONG_TYPE:
      _pd_long_value >>= _n;
      break;
    case FLOAT_TYPE:
      _pd_float_value >>= _n;
      break;
    case DOUBLE_TYPE:
      _pd_double_value >>= _n;
      break;
    default: break;

  
  }


}

void
SDOPackage::Numeric::operator<<= (cdrStream& _n)
{
  (NumericType&)_pd__d <<= _n;

  switch(_pd__d) {
    case SHORT_TYPE:
      _pd__default = 0;
      (::CORBA::Short&)_pd_short_value <<= _n;
      break;
    case LONG_TYPE:
      _pd__default = 0;
      (::CORBA::Long&)_pd_long_value <<= _n;
      break;
    case FLOAT_TYPE:
      _pd__default = 0;
      (::CORBA::Float&)_pd_float_value <<= _n;
      break;
    case DOUBLE_TYPE:
      _pd__default = 0;
      (::CORBA::Double&)_pd_double_value <<= _n;
      break;

  }
  _pd__initialised = 1;
}

void
SDOPackage::EnumerationType::operator>>= (cdrStream &_n) const
{
  (const StringList&) enumerated_values >>= _n;

}

void
SDOPackage::EnumerationType::operator<<= (cdrStream &_n)
{
  (StringList&)enumerated_values <<= _n;

}

void
SDOPackage::RangeType::operator>>= (cdrStream &_n) const
{
  (const Numeric&) min >>= _n;
  (const Numeric&) max >>= _n;
  _n.marshalBoolean(min_inclusive);
  _n.marshalBoolean(max_inclusive);

}

void
SDOPackage::RangeType::operator<<= (cdrStream &_n)
{
  (Numeric&)min <<= _n;
  (Numeric&)max <<= _n;
  min_inclusive = _n.unmarshalBoolean();
  max_inclusive = _n.unmarshalBoolean();

}

void
SDOPackage::IntervalType::operator>>= (cdrStream &_n) const
{
  (const Numeric&) min >>= _n;
  (const Numeric&) max >>= _n;
  _n.marshalBoolean(min_inclusive);
  _n.marshalBoolean(max_inclusive);
  (const Numeric&) step >>= _n;

}

void
SDOPackage::IntervalType::operator<<= (cdrStream &_n)
{
  (Numeric&)min <<= _n;
  (Numeric&)max <<= _n;
  min_inclusive = _n.unmarshalBoolean();
  max_inclusive = _n.unmarshalBoolean();
  (Numeric&)step <<= _n;

}

void
SDOPackage::AllowedValues::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case ENUMERATION:
      (const EnumerationType&) _pd_allowed_enum >>= _n;
      break;
    case INTERVAL:
      (const IntervalType&) _pd_allowed_interval >>= _n;
      break;
    case RANGE:
      (const RangeType&) _pd_allowed_range >>= _n;
      break;
    default: break;

  
  }


}

void
SDOPackage::AllowedValues::operator<<= (cdrStream& _n)
{
  (ComplexDataType&)_pd__d <<= _n;

  switch(_pd__d) {
    case ENUMERATION:
      _pd__default = 0;
      (EnumerationType&)_pd_allowed_enum <<= _n;
      break;
    case INTERVAL:
      _pd__default = 0;
      (IntervalType&)_pd_allowed_interval <<= _n;
      break;
    case RANGE:
      _pd__default = 0;
      (RangeType&)_pd_allowed_range <<= _n;
      break;

  }
  _pd__initialised = 1;
}

void
SDOPackage::Parameter::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  ::CORBA::TypeCode::marshalTypeCode(type,_n);
  (const AllowedValues&) allowed_values >>= _n;

}

void
SDOPackage::Parameter::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  type = ::CORBA::TypeCode::unmarshalTypeCode(_n);
  (AllowedValues&)allowed_values <<= _n;

}

void
SDOPackage::OrganizationProperty::operator>>= (cdrStream &_n) const
{
  (const NVList&) properties >>= _n;

}

void
SDOPackage::OrganizationProperty::operator<<= (cdrStream &_n)
{
  (NVList&)properties <<= _n;

}

void
SDOPackage::DeviceProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(device_type,0);
  _n.marshalString(manufacturer,0);
  _n.marshalString(model,0);
  _n.marshalString(version,0);
  (const NVList&) properties >>= _n;

}

void
SDOPackage::DeviceProfile::operator<<= (cdrStream &_n)
{
  device_type = _n.unmarshalString(0);
  manufacturer = _n.unmarshalString(0);
  model = _n.unmarshalString(0);
  version = _n.unmarshalString(0);
  (NVList&)properties <<= _n;

}

void
SDOPackage::ServiceProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(id,0);
  _n.marshalString(interface_type,0);
  (const NVList&) properties >>= _n;
  SDOService_Helper::marshalObjRef(service,_n);

}

void
SDOPackage::ServiceProfile::operator<<= (cdrStream &_n)
{
  id = _n.unmarshalString(0);
  interface_type = _n.unmarshalString(0);
  (NVList&)properties <<= _n;
  service = SDOService_Helper::unmarshalObjRef(_n);

}

void
SDOPackage::ConfigurationSet::operator>>= (cdrStream &_n) const
{
  _n.marshalString(id,0);
  _n.marshalString(description,0);
  (const NVList&) configuration_data >>= _n;

}

void
SDOPackage::ConfigurationSet::operator<<= (cdrStream &_n)
{
  id = _n.unmarshalString(0);
  description = _n.unmarshalString(0);
  (NVList&)configuration_data <<= _n;

}

::CORBA::Exception::insertExceptionToAny SDOPackage::NotAvailable::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP SDOPackage::NotAvailable::insertToAnyFnNCP = 0;

SDOPackage::NotAvailable::NotAvailable(const SDOPackage::NotAvailable& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

SDOPackage::NotAvailable::NotAvailable(const char* _description)
{
  pd_insertToAnyFn    = SDOPackage::NotAvailable::insertToAnyFn;
  pd_insertToAnyFnNCP = SDOPackage::NotAvailable::insertToAnyFnNCP;
  description = _description;

}



SDOPackage::NotAvailable& SDOPackage::NotAvailable::operator=(const SDOPackage::NotAvailable& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

SDOPackage::NotAvailable::~NotAvailable() {}

void SDOPackage::NotAvailable::_raise() const { throw *this; }

const char* SDOPackage::NotAvailable::_PD_repoId = "IDL:org.omg/SDOPackage/NotAvailable:1.0";
const char* SDOPackage::NotAvailable::_PD_typeId = "Exception/UserException/SDOPackage::NotAvailable";

SDOPackage::NotAvailable* SDOPackage::NotAvailable::_downcast(::CORBA::Exception* _e) {
  return (NotAvailable*) _NP_is_a(_e, _PD_typeId);
}

const SDOPackage::NotAvailable* SDOPackage::NotAvailable::_downcast(const ::CORBA::Exception* _e) {
  return (const NotAvailable*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* SDOPackage::NotAvailable::_NP_duplicate() const {
  return new NotAvailable(*this);
}

const char* SDOPackage::NotAvailable::_NP_typeId() const {
  return _PD_typeId;
}

const char* SDOPackage::NotAvailable::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org.omg/SDOPackage/NotAvailable:1.0");
  return _PD_repoId;
}
 
void SDOPackage::NotAvailable::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
SDOPackage::NotAvailable::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
SDOPackage::NotAvailable::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny SDOPackage::InterfaceNotImplemented::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP SDOPackage::InterfaceNotImplemented::insertToAnyFnNCP = 0;

SDOPackage::InterfaceNotImplemented::InterfaceNotImplemented(const SDOPackage::InterfaceNotImplemented& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

SDOPackage::InterfaceNotImplemented::InterfaceNotImplemented(const char* _description)
{
  pd_insertToAnyFn    = SDOPackage::InterfaceNotImplemented::insertToAnyFn;
  pd_insertToAnyFnNCP = SDOPackage::InterfaceNotImplemented::insertToAnyFnNCP;
  description = _description;

}



SDOPackage::InterfaceNotImplemented& SDOPackage::InterfaceNotImplemented::operator=(const SDOPackage::InterfaceNotImplemented& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

SDOPackage::InterfaceNotImplemented::~InterfaceNotImplemented() {}

void SDOPackage::InterfaceNotImplemented::_raise() const { throw *this; }

const char* SDOPackage::InterfaceNotImplemented::_PD_repoId = "IDL:org.omg/SDOPackage/InterfaceNotImplemented:1.0";
const char* SDOPackage::InterfaceNotImplemented::_PD_typeId = "Exception/UserException/SDOPackage::InterfaceNotImplemented";

SDOPackage::InterfaceNotImplemented* SDOPackage::InterfaceNotImplemented::_downcast(::CORBA::Exception* _e) {
  return (InterfaceNotImplemented*) _NP_is_a(_e, _PD_typeId);
}

const SDOPackage::InterfaceNotImplemented* SDOPackage::InterfaceNotImplemented::_downcast(const ::CORBA::Exception* _e) {
  return (const InterfaceNotImplemented*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* SDOPackage::InterfaceNotImplemented::_NP_duplicate() const {
  return new InterfaceNotImplemented(*this);
}

const char* SDOPackage::InterfaceNotImplemented::_NP_typeId() const {
  return _PD_typeId;
}

const char* SDOPackage::InterfaceNotImplemented::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org.omg/SDOPackage/InterfaceNotImplemented:1.0");
  return _PD_repoId;
}
 
void SDOPackage::InterfaceNotImplemented::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
SDOPackage::InterfaceNotImplemented::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
SDOPackage::InterfaceNotImplemented::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny SDOPackage::InvalidParameter::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP SDOPackage::InvalidParameter::insertToAnyFnNCP = 0;

SDOPackage::InvalidParameter::InvalidParameter(const SDOPackage::InvalidParameter& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

SDOPackage::InvalidParameter::InvalidParameter(const char* _description)
{
  pd_insertToAnyFn    = SDOPackage::InvalidParameter::insertToAnyFn;
  pd_insertToAnyFnNCP = SDOPackage::InvalidParameter::insertToAnyFnNCP;
  description = _description;

}



SDOPackage::InvalidParameter& SDOPackage::InvalidParameter::operator=(const SDOPackage::InvalidParameter& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

SDOPackage::InvalidParameter::~InvalidParameter() {}

void SDOPackage::InvalidParameter::_raise() const { throw *this; }

const char* SDOPackage::InvalidParameter::_PD_repoId = "IDL:org.omg/SDOPackage/InvalidParameter:1.0";
const char* SDOPackage::InvalidParameter::_PD_typeId = "Exception/UserException/SDOPackage::InvalidParameter";

SDOPackage::InvalidParameter* SDOPackage::InvalidParameter::_downcast(::CORBA::Exception* _e) {
  return (InvalidParameter*) _NP_is_a(_e, _PD_typeId);
}

const SDOPackage::InvalidParameter* SDOPackage::InvalidParameter::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidParameter*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* SDOPackage::InvalidParameter::_NP_duplicate() const {
  return new InvalidParameter(*this);
}

const char* SDOPackage::InvalidParameter::_NP_typeId() const {
  return _PD_typeId;
}

const char* SDOPackage::InvalidParameter::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org.omg/SDOPackage/InvalidParameter:1.0");
  return _PD_repoId;
}
 
void SDOPackage::InvalidParameter::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
SDOPackage::InvalidParameter::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
SDOPackage::InvalidParameter::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny SDOPackage::InternalError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP SDOPackage::InternalError::insertToAnyFnNCP = 0;

SDOPackage::InternalError::InternalError(const SDOPackage::InternalError& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

SDOPackage::InternalError::InternalError(const char* _description)
{
  pd_insertToAnyFn    = SDOPackage::InternalError::insertToAnyFn;
  pd_insertToAnyFnNCP = SDOPackage::InternalError::insertToAnyFnNCP;
  description = _description;

}



SDOPackage::InternalError& SDOPackage::InternalError::operator=(const SDOPackage::InternalError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

SDOPackage::InternalError::~InternalError() {}

void SDOPackage::InternalError::_raise() const { throw *this; }

const char* SDOPackage::InternalError::_PD_repoId = "IDL:org.omg/SDOPackage/InternalError:1.0";
const char* SDOPackage::InternalError::_PD_typeId = "Exception/UserException/SDOPackage::InternalError";

SDOPackage::InternalError* SDOPackage::InternalError::_downcast(::CORBA::Exception* _e) {
  return (InternalError*) _NP_is_a(_e, _PD_typeId);
}

const SDOPackage::InternalError* SDOPackage::InternalError::_downcast(const ::CORBA::Exception* _e) {
  return (const InternalError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* SDOPackage::InternalError::_NP_duplicate() const {
  return new InternalError(*this);
}

const char* SDOPackage::InternalError::_NP_typeId() const {
  return _PD_typeId;
}

const char* SDOPackage::InternalError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org.omg/SDOPackage/InternalError:1.0");
  return _PD_repoId;
}
 
void SDOPackage::InternalError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
SDOPackage::InternalError::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
SDOPackage::InternalError::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

SDOPackage::SDOSystemElement_ptr SDOPackage::SDOSystemElement_Helper::_nil() {
  return ::SDOPackage::SDOSystemElement::_nil();
}

::CORBA::Boolean SDOPackage::SDOSystemElement_Helper::is_nil(::SDOPackage::SDOSystemElement_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::SDOSystemElement_Helper::release(::SDOPackage::SDOSystemElement_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::SDOSystemElement_Helper::marshalObjRef(::SDOPackage::SDOSystemElement_ptr obj, cdrStream& s) {
  ::SDOPackage::SDOSystemElement::_marshalObjRef(obj, s);
}

SDOPackage::SDOSystemElement_ptr SDOPackage::SDOSystemElement_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::SDOSystemElement::_unmarshalObjRef(s);
}

void SDOPackage::SDOSystemElement_Helper::duplicate(::SDOPackage::SDOSystemElement_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::SDOSystemElement_ptr
SDOPackage::SDOSystemElement::_duplicate(::SDOPackage::SDOSystemElement_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::SDOSystemElement_ptr
SDOPackage::SDOSystemElement::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::SDOSystemElement_ptr
SDOPackage::SDOSystemElement::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::SDOSystemElement_ptr
SDOPackage::SDOSystemElement::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SDOSystemElement _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SDOSystemElement* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SDOSystemElement;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::SDOSystemElement::_PD_repoId = "IDL:org.omg/SDOPackage/SDOSystemElement:1.0";


SDOPackage::_objref_SDOSystemElement::~_objref_SDOSystemElement() {
  
}


SDOPackage::_objref_SDOSystemElement::_objref_SDOSystemElement(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::SDOSystemElement::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_SDOSystemElement::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::SDOSystemElement_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::SDOSystemElement_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mOrganizationList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::OrganizationList_var result;
};

void _0RL_cd_ca9e221a19953c49_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::OrganizationList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::OrganizationList;
  (SDOPackage::OrganizationList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_00000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_00000000* tcd = (_0RL_cd_ca9e221a19953c49_00000000*)cd;
  SDOPackage::_impl_SDOSystemElement* impl = (SDOPackage::_impl_SDOSystemElement*) svnt->_ptrToInterface(SDOPackage::SDOSystemElement::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_owned_organizations();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_owned_organizations();
  else {
    try {
      tcd->result = impl->get_owned_organizations();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::OrganizationList* SDOPackage::_objref_SDOSystemElement::get_owned_organizations()
{
  _0RL_cd_ca9e221a19953c49_00000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_10000000, "get_owned_organizations", 24);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
SDOPackage::_pof_SDOSystemElement::~_pof_SDOSystemElement() {}


omniObjRef*
SDOPackage::_pof_SDOSystemElement::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_SDOSystemElement(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_SDOSystemElement::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return 1;
  
  return 0;
}

const SDOPackage::_pof_SDOSystemElement _the_pof_SDOPackage_mSDOSystemElement;

SDOPackage::_impl_SDOSystemElement::~_impl_SDOSystemElement() {}


::CORBA::Boolean
SDOPackage::_impl_SDOSystemElement::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_owned_organizations") ) {

    _0RL_cd_ca9e221a19953c49_00000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_10000000, "get_owned_organizations", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
SDOPackage::_impl_SDOSystemElement::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::_impl_SDOSystemElement*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::_impl_SDOSystemElement*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_SDOSystemElement::_mostDerivedRepoId()
{
  return ::SDOPackage::SDOSystemElement::_PD_repoId;
}

SDOPackage::SDO_ptr SDOPackage::SDO_Helper::_nil() {
  return ::SDOPackage::SDO::_nil();
}

::CORBA::Boolean SDOPackage::SDO_Helper::is_nil(::SDOPackage::SDO_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::SDO_Helper::release(::SDOPackage::SDO_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::SDO_Helper::marshalObjRef(::SDOPackage::SDO_ptr obj, cdrStream& s) {
  ::SDOPackage::SDO::_marshalObjRef(obj, s);
}

SDOPackage::SDO_ptr SDOPackage::SDO_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::SDO::_unmarshalObjRef(s);
}

void SDOPackage::SDO_Helper::duplicate(::SDOPackage::SDO_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::SDO_ptr
SDOPackage::SDO::_duplicate(::SDOPackage::SDO_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::SDO_ptr
SDOPackage::SDO::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::SDO_ptr
SDOPackage::SDO::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::SDO_ptr
SDOPackage::SDO::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SDO _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SDO* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SDO;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::SDO::_PD_repoId = "IDL:org.omg/SDOPackage/SDO:1.0";


SDOPackage::_objref_SDO::~_objref_SDO() {
  
}


SDOPackage::_objref_SDO::_objref_SDO(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::SDO::_PD_repoId, ior, id, 1),
   _objref_SDOSystemElement(ior, id)
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_SDO::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::SDO::_PD_repoId )
    return (::SDOPackage::SDO_ptr) this;
  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::SDOSystemElement_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDO::_PD_repoId) )
    return (::SDOPackage::SDO_ptr) this;
  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::SDOSystemElement_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_ca9e221a19953c49_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_ca9e221a19953c49_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_ca9e221a19953c49_20000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_20000000* tcd = (_0RL_cd_ca9e221a19953c49_20000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_sdo_id();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_sdo_id();
  else {
    try {
      tcd->result = impl->get_sdo_id();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

char* SDOPackage::_objref_SDO::get_sdo_id()
{
  _0RL_cd_ca9e221a19953c49_20000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_30000000, "get_sdo_id", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_20000000* tcd = (_0RL_cd_ca9e221a19953c49_20000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_sdo_type();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_sdo_type();
  else {
    try {
      tcd->result = impl->get_sdo_type();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

char* SDOPackage::_objref_SDO::get_sdo_type()
{
  _0RL_cd_ca9e221a19953c49_20000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_40000000, "get_sdo_type", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mDeviceProfile_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::DeviceProfile_var result;
};

void _0RL_cd_ca9e221a19953c49_50000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::DeviceProfile&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_50000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::DeviceProfile;
  (SDOPackage::DeviceProfile&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_50000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_50000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_50000000* tcd = (_0RL_cd_ca9e221a19953c49_50000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_device_profile();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_device_profile();
  else {
    try {
      tcd->result = impl->get_device_profile();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::DeviceProfile* SDOPackage::_objref_SDO::get_device_profile()
{
  _0RL_cd_ca9e221a19953c49_50000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_60000000, "get_device_profile", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mServiceProfileList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ServiceProfileList_var result;
};

void _0RL_cd_ca9e221a19953c49_70000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ServiceProfileList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ServiceProfileList;
  (SDOPackage::ServiceProfileList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_70000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_70000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_70000000* tcd = (_0RL_cd_ca9e221a19953c49_70000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_service_profiles();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_service_profiles();
  else {
    try {
      tcd->result = impl->get_service_profiles();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ServiceProfileList* SDOPackage::_objref_SDO::get_service_profiles()
{
  _0RL_cd_ca9e221a19953c49_70000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_80000000, "get_service_profiles", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mServiceProfile_i_cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  SDOPackage::ServiceProfile_var result;
};

void _0RL_cd_ca9e221a19953c49_90000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ca9e221a19953c49_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_90000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ServiceProfile&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ServiceProfile;
  (SDOPackage::ServiceProfile&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_90000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_90000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_90000000* tcd = (_0RL_cd_ca9e221a19953c49_90000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_service_profile(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_service_profile(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_service_profile(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ServiceProfile* SDOPackage::_objref_SDO::get_service_profile(const char* id)
{
  _0RL_cd_ca9e221a19953c49_90000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a0000000, "get_service_profile", 20);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mSDOService_i_cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  SDOPackage::SDOService_var result;
};

void _0RL_cd_ca9e221a19953c49_b0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ca9e221a19953c49_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_b0000000::marshalReturnedValues(cdrStream& _n)
{
  SDOPackage::SDOService_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_ca9e221a19953c49_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = SDOPackage::SDOService_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_ca9e221a19953c49_b0000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_b0000000* tcd = (_0RL_cd_ca9e221a19953c49_b0000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_sdo_service(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_sdo_service(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_sdo_service(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::SDOService_ptr SDOPackage::_objref_SDO::get_sdo_service(const char* id)
{
  _0RL_cd_ca9e221a19953c49_b0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c0000000, "get_sdo_service", 16);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mConfiguration_e_cSDOPackage_mInterfaceNotImplemented_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::Configuration_var result;
};

void _0RL_cd_ca9e221a19953c49_d0000000::marshalReturnedValues(cdrStream& _n)
{
  SDOPackage::Configuration_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_ca9e221a19953c49_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = SDOPackage::Configuration_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_ca9e221a19953c49_d0000000::_user_exns[] = {
  SDOPackage::InterfaceNotImplemented::_PD_repoId,
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_d0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InterfaceNotImplemented::_PD_repoId) ) {
    SDOPackage::InterfaceNotImplemented _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_d0000000* tcd = (_0RL_cd_ca9e221a19953c49_d0000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration();
  else {
    try {
      tcd->result = impl->get_configuration();
    }
    catch(SDOPackage::InterfaceNotImplemented& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::Configuration_ptr SDOPackage::_objref_SDO::get_configuration()
{
  _0RL_cd_ca9e221a19953c49_d0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e0000000, "get_configuration", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mMonitoring_e_cSDOPackage_mInterfaceNotImplemented_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::Monitoring_var result;
};

void _0RL_cd_ca9e221a19953c49_f0000000::marshalReturnedValues(cdrStream& _n)
{
  SDOPackage::Monitoring_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_ca9e221a19953c49_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = SDOPackage::Monitoring_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_ca9e221a19953c49_f0000000::_user_exns[] = {
  SDOPackage::InterfaceNotImplemented::_PD_repoId,
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_f0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InterfaceNotImplemented::_PD_repoId) ) {
    SDOPackage::InterfaceNotImplemented _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_f0000000* tcd = (_0RL_cd_ca9e221a19953c49_f0000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_monitoring();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_monitoring();
  else {
    try {
      tcd->result = impl->get_monitoring();
    }
    catch(SDOPackage::InterfaceNotImplemented& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::Monitoring_ptr SDOPackage::_objref_SDO::get_monitoring()
{
  _0RL_cd_ca9e221a19953c49_f0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_01000000, "get_monitoring", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_00000000* tcd = (_0RL_cd_ca9e221a19953c49_00000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_organizations();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_organizations();
  else {
    try {
      tcd->result = impl->get_organizations();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::OrganizationList* SDOPackage::_objref_SDO::get_organizations()
{
  _0RL_cd_ca9e221a19953c49_00000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_11000000, "get_organizations", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mNVList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::NVList_var result;
};

void _0RL_cd_ca9e221a19953c49_21000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::NVList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::NVList;
  (SDOPackage::NVList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_21000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_21000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_21000000* tcd = (_0RL_cd_ca9e221a19953c49_21000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_status_list();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_status_list();
  else {
    try {
      tcd->result = impl->get_status_list();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::NVList* SDOPackage::_objref_SDO::get_status_list()
{
  _0RL_cd_ca9e221a19953c49_21000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_31000000, "get_status_list", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cany_i_cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Any_var result;
};

void _0RL_cd_ca9e221a19953c49_41000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ca9e221a19953c49_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const ::CORBA::Any&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ::CORBA::Any;
  (::CORBA::Any&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_41000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_41000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_41000000* tcd = (_0RL_cd_ca9e221a19953c49_41000000*)cd;
  SDOPackage::_impl_SDO* impl = (SDOPackage::_impl_SDO*) svnt->_ptrToInterface(SDOPackage::SDO::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_status(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_status(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_status(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Any* SDOPackage::_objref_SDO::get_status(const char* nme)
{
  _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_51000000, "get_status", 11);
  _call_desc.arg_0 = nme;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
SDOPackage::_pof_SDO::~_pof_SDO() {}


omniObjRef*
SDOPackage::_pof_SDO::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_SDO(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_SDO::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::SDO::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, SDOPackage::SDOSystemElement::_PD_repoId) )
    return 1;


  return 0;
}

const SDOPackage::_pof_SDO _the_pof_SDOPackage_mSDO;

SDOPackage::_impl_SDO::~_impl_SDO() {}


::CORBA::Boolean
SDOPackage::_impl_SDO::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_sdo_id") ) {

    _0RL_cd_ca9e221a19953c49_20000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_30000000, "get_sdo_id", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_sdo_type") ) {

    _0RL_cd_ca9e221a19953c49_20000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_40000000, "get_sdo_type", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_device_profile") ) {

    _0RL_cd_ca9e221a19953c49_50000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_60000000, "get_device_profile", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_service_profiles") ) {

    _0RL_cd_ca9e221a19953c49_70000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_80000000, "get_service_profiles", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_service_profile") ) {

    _0RL_cd_ca9e221a19953c49_90000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a0000000, "get_service_profile", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_sdo_service") ) {

    _0RL_cd_ca9e221a19953c49_b0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c0000000, "get_sdo_service", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration") ) {

    _0RL_cd_ca9e221a19953c49_d0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e0000000, "get_configuration", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_monitoring") ) {

    _0RL_cd_ca9e221a19953c49_f0000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_01000000, "get_monitoring", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_organizations") ) {

    _0RL_cd_ca9e221a19953c49_00000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_11000000, "get_organizations", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_status_list") ) {

    _0RL_cd_ca9e221a19953c49_21000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_31000000, "get_status_list", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_status") ) {

    _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_51000000, "get_status", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_SDOSystemElement::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_SDOSystemElement*)this)->
      _impl_SDOSystemElement::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
SDOPackage::_impl_SDO::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::SDO::_PD_repoId )
    return (::SDOPackage::_impl_SDO*) this;
  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::_impl_SDOSystemElement*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::SDO::_PD_repoId) )
    return (::SDOPackage::_impl_SDO*) this;
  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::_impl_SDOSystemElement*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_SDO::_mostDerivedRepoId()
{
  return ::SDOPackage::SDO::_PD_repoId;
}

SDOPackage::Configuration_ptr SDOPackage::Configuration_Helper::_nil() {
  return ::SDOPackage::Configuration::_nil();
}

::CORBA::Boolean SDOPackage::Configuration_Helper::is_nil(::SDOPackage::Configuration_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::Configuration_Helper::release(::SDOPackage::Configuration_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::Configuration_Helper::marshalObjRef(::SDOPackage::Configuration_ptr obj, cdrStream& s) {
  ::SDOPackage::Configuration::_marshalObjRef(obj, s);
}

SDOPackage::Configuration_ptr SDOPackage::Configuration_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::Configuration::_unmarshalObjRef(s);
}

void SDOPackage::Configuration_Helper::duplicate(::SDOPackage::Configuration_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::Configuration_ptr
SDOPackage::Configuration::_duplicate(::SDOPackage::Configuration_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::Configuration_ptr
SDOPackage::Configuration::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::Configuration_ptr
SDOPackage::Configuration::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::Configuration_ptr
SDOPackage::Configuration::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Configuration _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Configuration* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Configuration;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::Configuration::_PD_repoId = "IDL:org.omg/SDOPackage/Configuration:1.0";


SDOPackage::_objref_Configuration::~_objref_Configuration() {
  
}


SDOPackage::_objref_Configuration::_objref_Configuration(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::Configuration::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_Configuration::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::Configuration::_PD_repoId )
    return (::SDOPackage::Configuration_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::Configuration::_PD_repoId) )
    return (::SDOPackage::Configuration_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mDeviceProfile_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::DeviceProfile_var arg_0_;
  const SDOPackage::DeviceProfile* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_61000000::marshalArguments(cdrStream& _n)
{
  (const SDOPackage::DeviceProfile&) *arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SDOPackage::DeviceProfile;
  (SDOPackage::DeviceProfile&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_61000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_61000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_61000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_61000000* tcd = (_0RL_cd_ca9e221a19953c49_61000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_device_profile(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_device_profile(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->set_device_profile(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::set_device_profile(const ::SDOPackage::DeviceProfile& dProfile)
{
  _0RL_cd_ca9e221a19953c49_61000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_71000000, "set_device_profile", 19);
  _call_desc.arg_0 = &(::SDOPackage::DeviceProfile&) dProfile;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mServiceProfile_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ServiceProfile_var arg_0_;
  const SDOPackage::ServiceProfile* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_81000000::marshalArguments(cdrStream& _n)
{
  (const SDOPackage::ServiceProfile&) *arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_81000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SDOPackage::ServiceProfile;
  (SDOPackage::ServiceProfile&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_81000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_81000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_81000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_81000000* tcd = (_0RL_cd_ca9e221a19953c49_81000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_service_profile(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_service_profile(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_service_profile(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::add_service_profile(const ::SDOPackage::ServiceProfile& sProfile)
{
  _0RL_cd_ca9e221a19953c49_81000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_91000000, "add_service_profile", 20);
  _call_desc.arg_0 = &(::SDOPackage::ServiceProfile&) sProfile;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mOrganization_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::Organization_var arg_0_;
  SDOPackage::Organization_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_a1000000::marshalArguments(cdrStream& _n)
{
  SDOPackage::Organization_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_ca9e221a19953c49_a1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = SDOPackage::Organization_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_a1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_a1000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_a1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_a1000000* tcd = (_0RL_cd_ca9e221a19953c49_a1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_organization(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_organization(tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_organization(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::add_organization(::SDOPackage::Organization_ptr organization_object)
{
  _0RL_cd_ca9e221a19953c49_a1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_b1000000, "add_organization", 17);
  _call_desc.arg_0 = organization_object;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ca9e221a19953c49_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_c1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_c1000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_c1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->remove_service_profile(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->remove_service_profile(tcd->arg_0);
  else {
    try {
      tcd->result = impl->remove_service_profile(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::remove_service_profile(const char* id)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_d1000000, "remove_service_profile", 23);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->remove_organization(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->remove_organization(tcd->arg_0);
  else {
    try {
      tcd->result = impl->remove_organization(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::remove_organization(const char* organization_id)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e1000000, "remove_organization", 20);
  _call_desc.arg_0 = organization_id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mParameterList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_f1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ParameterList_var result;
};

void _0RL_cd_ca9e221a19953c49_f1000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ParameterList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_f1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ParameterList;
  (SDOPackage::ParameterList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_f1000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_f1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_f1000000* tcd = (_0RL_cd_ca9e221a19953c49_f1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration_parameters();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration_parameters();
  else {
    try {
      tcd->result = impl->get_configuration_parameters();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ParameterList* SDOPackage::_objref_Configuration::get_configuration_parameters()
{
  _0RL_cd_ca9e221a19953c49_f1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_02000000, "get_configuration_parameters", 29);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_21000000* tcd = (_0RL_cd_ca9e221a19953c49_21000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration_parameter_values();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration_parameter_values();
  else {
    try {
      tcd->result = impl->get_configuration_parameter_values();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::NVList* SDOPackage::_objref_Configuration::get_configuration_parameter_values()
{
  _0RL_cd_ca9e221a19953c49_21000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_12000000, "get_configuration_parameter_values", 35);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_41000000* tcd = (_0RL_cd_ca9e221a19953c49_41000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration_parameter_value(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration_parameter_value(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_configuration_parameter_value(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Any* SDOPackage::_objref_Configuration::get_configuration_parameter_value(const char* name)
{
  _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_22000000, "get_configuration_parameter_value", 34);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cany_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_32000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Any_var arg_1_;
  const ::CORBA::Any* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_32000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const ::CORBA::Any&) *arg_1 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_32000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_ca9e221a19953c49_32000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_32000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_32000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_32000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_32000000* tcd = (_0RL_cd_ca9e221a19953c49_32000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_configuration_parameter(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_configuration_parameter(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->set_configuration_parameter(tcd->arg_0, *tcd->arg_1);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::set_configuration_parameter(const char* name, const ::CORBA::Any& value)
{
  _0RL_cd_ca9e221a19953c49_32000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_42000000, "set_configuration_parameter", 28);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::CORBA::Any&) value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mConfigurationSetList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_52000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_52000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ConfigurationSetList_var result;
};

void _0RL_cd_ca9e221a19953c49_52000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ConfigurationSetList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_52000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ConfigurationSetList;
  (SDOPackage::ConfigurationSetList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_52000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_52000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_52000000* tcd = (_0RL_cd_ca9e221a19953c49_52000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration_sets();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration_sets();
  else {
    try {
      tcd->result = impl->get_configuration_sets();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ConfigurationSetList* SDOPackage::_objref_Configuration::get_configuration_sets()
{
  _0RL_cd_ca9e221a19953c49_52000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_62000000, "get_configuration_sets", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mConfigurationSet_i_cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_72000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  SDOPackage::ConfigurationSet_var result;
};

void _0RL_cd_ca9e221a19953c49_72000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ca9e221a19953c49_72000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_72000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ConfigurationSet&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_72000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ConfigurationSet;
  (SDOPackage::ConfigurationSet&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_72000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_72000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_72000000* tcd = (_0RL_cd_ca9e221a19953c49_72000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_configuration_set(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_configuration_set(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_configuration_set(tcd->arg_0);
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ConfigurationSet* SDOPackage::_objref_Configuration::get_configuration_set(const char* config_id)
{
  _0RL_cd_ca9e221a19953c49_72000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_82000000, "get_configuration_set", 22);
  _call_desc.arg_0 = config_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mConfigurationSet_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ConfigurationSet_var arg_0_;
  const SDOPackage::ConfigurationSet* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_92000000::marshalArguments(cdrStream& _n)
{
  (const SDOPackage::ConfigurationSet&) *arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_92000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SDOPackage::ConfigurationSet;
  (SDOPackage::ConfigurationSet&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_92000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_92000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_92000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_92000000* tcd = (_0RL_cd_ca9e221a19953c49_92000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_configuration_set_values(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_configuration_set_values(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->set_configuration_set_values(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::set_configuration_set_values(const ::SDOPackage::ConfigurationSet& configuration_set)
{
  _0RL_cd_ca9e221a19953c49_92000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a2000000, "set_configuration_set_values", 29);
  _call_desc.arg_0 = &(::SDOPackage::ConfigurationSet&) configuration_set;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mConfigurationSet_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::ConfigurationSet_var result;
};

void _0RL_cd_ca9e221a19953c49_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::ConfigurationSet&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::ConfigurationSet;
  (SDOPackage::ConfigurationSet&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_b2000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_b2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_b2000000* tcd = (_0RL_cd_ca9e221a19953c49_b2000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_active_configuration_set();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_active_configuration_set();
  else {
    try {
      tcd->result = impl->get_active_configuration_set();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::ConfigurationSet* SDOPackage::_objref_Configuration::get_active_configuration_set()
{
  _0RL_cd_ca9e221a19953c49_b2000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c2000000, "get_active_configuration_set", 29);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_92000000* tcd = (_0RL_cd_ca9e221a19953c49_92000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_configuration_set(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_configuration_set(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_configuration_set(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::add_configuration_set(const ::SDOPackage::ConfigurationSet& configuration_set)
{
  _0RL_cd_ca9e221a19953c49_92000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_d2000000, "add_configuration_set", 22);
  _call_desc.arg_0 = &(::SDOPackage::ConfigurationSet&) configuration_set;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->remove_configuration_set(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->remove_configuration_set(tcd->arg_0);
  else {
    try {
      tcd->result = impl->remove_configuration_set(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::remove_configuration_set(const char* config_id)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e2000000, "remove_configuration_set", 25);
  _call_desc.arg_0 = config_id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Configuration* impl = (SDOPackage::_impl_Configuration*) svnt->_ptrToInterface(SDOPackage::Configuration::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->activate_configuration_set(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->activate_configuration_set(tcd->arg_0);
  else {
    try {
      tcd->result = impl->activate_configuration_set(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Configuration::activate_configuration_set(const char* config_id)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_f2000000, "activate_configuration_set", 27);
  _call_desc.arg_0 = config_id;

  _invoke(_call_desc);
  return _call_desc.result;


}
SDOPackage::_pof_Configuration::~_pof_Configuration() {}


omniObjRef*
SDOPackage::_pof_Configuration::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_Configuration(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_Configuration::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::Configuration::_PD_repoId) )
    return 1;
  
  return 0;
}

const SDOPackage::_pof_Configuration _the_pof_SDOPackage_mConfiguration;

SDOPackage::_impl_Configuration::~_impl_Configuration() {}


::CORBA::Boolean
SDOPackage::_impl_Configuration::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "set_device_profile") ) {

    _0RL_cd_ca9e221a19953c49_61000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_71000000, "set_device_profile", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_service_profile") ) {

    _0RL_cd_ca9e221a19953c49_81000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_91000000, "add_service_profile", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_organization") ) {

    _0RL_cd_ca9e221a19953c49_a1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_b1000000, "add_organization", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_service_profile") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_d1000000, "remove_service_profile", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_organization") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e1000000, "remove_organization", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration_parameters") ) {

    _0RL_cd_ca9e221a19953c49_f1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_02000000, "get_configuration_parameters", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration_parameter_values") ) {

    _0RL_cd_ca9e221a19953c49_21000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_12000000, "get_configuration_parameter_values", 35, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration_parameter_value") ) {

    _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_22000000, "get_configuration_parameter_value", 34, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_configuration_parameter") ) {

    _0RL_cd_ca9e221a19953c49_32000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_42000000, "set_configuration_parameter", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration_sets") ) {

    _0RL_cd_ca9e221a19953c49_52000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_62000000, "get_configuration_sets", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_configuration_set") ) {

    _0RL_cd_ca9e221a19953c49_72000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_82000000, "get_configuration_set", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_configuration_set_values") ) {

    _0RL_cd_ca9e221a19953c49_92000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a2000000, "set_configuration_set_values", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_active_configuration_set") ) {

    _0RL_cd_ca9e221a19953c49_b2000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c2000000, "get_active_configuration_set", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_configuration_set") ) {

    _0RL_cd_ca9e221a19953c49_92000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_d2000000, "add_configuration_set", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_configuration_set") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e2000000, "remove_configuration_set", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "activate_configuration_set") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_f2000000, "activate_configuration_set", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
SDOPackage::_impl_Configuration::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::Configuration::_PD_repoId )
    return (::SDOPackage::_impl_Configuration*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::Configuration::_PD_repoId) )
    return (::SDOPackage::_impl_Configuration*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_Configuration::_mostDerivedRepoId()
{
  return ::SDOPackage::Configuration::_PD_repoId;
}

SDOPackage::Monitoring_ptr SDOPackage::Monitoring_Helper::_nil() {
  return ::SDOPackage::Monitoring::_nil();
}

::CORBA::Boolean SDOPackage::Monitoring_Helper::is_nil(::SDOPackage::Monitoring_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::Monitoring_Helper::release(::SDOPackage::Monitoring_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::Monitoring_Helper::marshalObjRef(::SDOPackage::Monitoring_ptr obj, cdrStream& s) {
  ::SDOPackage::Monitoring::_marshalObjRef(obj, s);
}

SDOPackage::Monitoring_ptr SDOPackage::Monitoring_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::Monitoring::_unmarshalObjRef(s);
}

void SDOPackage::Monitoring_Helper::duplicate(::SDOPackage::Monitoring_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::Monitoring_ptr
SDOPackage::Monitoring::_duplicate(::SDOPackage::Monitoring_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::Monitoring_ptr
SDOPackage::Monitoring::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::Monitoring_ptr
SDOPackage::Monitoring::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::Monitoring_ptr
SDOPackage::Monitoring::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Monitoring _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Monitoring* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Monitoring;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::Monitoring::_PD_repoId = "IDL:org.omg/SDOPackage/Monitoring:1.0";


SDOPackage::_objref_Monitoring::~_objref_Monitoring() {
  
}


SDOPackage::_objref_Monitoring::_objref_Monitoring(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::Monitoring::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_Monitoring::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::Monitoring::_PD_repoId )
    return (::SDOPackage::Monitoring_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::Monitoring::_PD_repoId) )
    return (::SDOPackage::Monitoring_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

SDOPackage::_pof_Monitoring::~_pof_Monitoring() {}


omniObjRef*
SDOPackage::_pof_Monitoring::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_Monitoring(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_Monitoring::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::Monitoring::_PD_repoId) )
    return 1;
  
  return 0;
}

const SDOPackage::_pof_Monitoring _the_pof_SDOPackage_mMonitoring;

SDOPackage::_impl_Monitoring::~_impl_Monitoring() {}


::CORBA::Boolean
SDOPackage::_impl_Monitoring::_dispatch(omniCallHandle& _handle)
{
  

  
  return 0;
}

void*
SDOPackage::_impl_Monitoring::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::Monitoring::_PD_repoId )
    return (::SDOPackage::_impl_Monitoring*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::Monitoring::_PD_repoId) )
    return (::SDOPackage::_impl_Monitoring*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_Monitoring::_mostDerivedRepoId()
{
  return ::SDOPackage::Monitoring::_PD_repoId;
}

SDOPackage::SDOService_ptr SDOPackage::SDOService_Helper::_nil() {
  return ::SDOPackage::SDOService::_nil();
}

::CORBA::Boolean SDOPackage::SDOService_Helper::is_nil(::SDOPackage::SDOService_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::SDOService_Helper::release(::SDOPackage::SDOService_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::SDOService_Helper::marshalObjRef(::SDOPackage::SDOService_ptr obj, cdrStream& s) {
  ::SDOPackage::SDOService::_marshalObjRef(obj, s);
}

SDOPackage::SDOService_ptr SDOPackage::SDOService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::SDOService::_unmarshalObjRef(s);
}

void SDOPackage::SDOService_Helper::duplicate(::SDOPackage::SDOService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::SDOService_ptr
SDOPackage::SDOService::_duplicate(::SDOPackage::SDOService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::SDOService_ptr
SDOPackage::SDOService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::SDOService_ptr
SDOPackage::SDOService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::SDOService_ptr
SDOPackage::SDOService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SDOService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SDOService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SDOService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::SDOService::_PD_repoId = "IDL:org.omg/SDOPackage/SDOService:1.0";


SDOPackage::_objref_SDOService::~_objref_SDOService() {
  
}


SDOPackage::_objref_SDOService::_objref_SDOService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::SDOService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_SDOService::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::SDOService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::SDOService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

SDOPackage::_pof_SDOService::~_pof_SDOService() {}


omniObjRef*
SDOPackage::_pof_SDOService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_SDOService(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_SDOService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return 1;
  
  return 0;
}

const SDOPackage::_pof_SDOService _the_pof_SDOPackage_mSDOService;

SDOPackage::_impl_SDOService::~_impl_SDOService() {}


::CORBA::Boolean
SDOPackage::_impl_SDOService::_dispatch(omniCallHandle& _handle)
{
  

  
  return 0;
}

void*
SDOPackage::_impl_SDOService::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::_impl_SDOService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::_impl_SDOService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_SDOService::_mostDerivedRepoId()
{
  return ::SDOPackage::SDOService::_PD_repoId;
}

SDOPackage::Organization_ptr SDOPackage::Organization_Helper::_nil() {
  return ::SDOPackage::Organization::_nil();
}

::CORBA::Boolean SDOPackage::Organization_Helper::is_nil(::SDOPackage::Organization_ptr p) {
  return ::CORBA::is_nil(p);

}

void SDOPackage::Organization_Helper::release(::SDOPackage::Organization_ptr p) {
  ::CORBA::release(p);
}

void SDOPackage::Organization_Helper::marshalObjRef(::SDOPackage::Organization_ptr obj, cdrStream& s) {
  ::SDOPackage::Organization::_marshalObjRef(obj, s);
}

SDOPackage::Organization_ptr SDOPackage::Organization_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SDOPackage::Organization::_unmarshalObjRef(s);
}

void SDOPackage::Organization_Helper::duplicate(::SDOPackage::Organization_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SDOPackage::Organization_ptr
SDOPackage::Organization::_duplicate(::SDOPackage::Organization_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SDOPackage::Organization_ptr
SDOPackage::Organization::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SDOPackage::Organization_ptr
SDOPackage::Organization::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SDOPackage::Organization_ptr
SDOPackage::Organization::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Organization _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Organization* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Organization;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SDOPackage::Organization::_PD_repoId = "IDL:org.omg/SDOPackage/Organization:1.0";


SDOPackage::_objref_Organization::~_objref_Organization() {
  
}


SDOPackage::_objref_Organization::_objref_Organization(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SDOPackage::Organization::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SDOPackage::_objref_Organization::_ptrToObjRef(const char* id)
{
  if( id == ::SDOPackage::Organization::_PD_repoId )
    return (::SDOPackage::Organization_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::Organization::_PD_repoId) )
    return (::SDOPackage::Organization_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_03000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_03000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_ca9e221a19953c49_03000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_ca9e221a19953c49_03000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_ca9e221a19953c49_03000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_03000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_03000000* tcd = (_0RL_cd_ca9e221a19953c49_03000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_organization_id();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_organization_id();
  else {
    try {
      tcd->result = impl->get_organization_id();
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

char* SDOPackage::_objref_Organization::get_organization_id()
{
  _0RL_cd_ca9e221a19953c49_03000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_13000000, "get_organization_id", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mOrganizationProperty_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_23000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::OrganizationProperty_var result;
};

void _0RL_cd_ca9e221a19953c49_23000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::OrganizationProperty&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_23000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::OrganizationProperty;
  (SDOPackage::OrganizationProperty&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_23000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_23000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_23000000* tcd = (_0RL_cd_ca9e221a19953c49_23000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_organization_property();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_organization_property();
  else {
    try {
      tcd->result = impl->get_organization_property();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::OrganizationProperty* SDOPackage::_objref_Organization::get_organization_property()
{
  _0RL_cd_ca9e221a19953c49_23000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_33000000, "get_organization_property", 26);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_41000000* tcd = (_0RL_cd_ca9e221a19953c49_41000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_organization_property_value(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_organization_property_value(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_organization_property_value(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Any* SDOPackage::_objref_Organization::get_organization_property_value(const char* name)
{
  _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_43000000, "get_organization_property_value", 32);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mOrganizationProperty_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_53000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::OrganizationProperty_var arg_0_;
  const SDOPackage::OrganizationProperty* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_53000000::marshalArguments(cdrStream& _n)
{
  (const SDOPackage::OrganizationProperty&) *arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_53000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SDOPackage::OrganizationProperty;
  (SDOPackage::OrganizationProperty&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_53000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_53000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_53000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_53000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_53000000* tcd = (_0RL_cd_ca9e221a19953c49_53000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_organization_property(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_organization_property(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_organization_property(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::add_organization_property(const ::SDOPackage::OrganizationProperty& organization_property)
{
  _0RL_cd_ca9e221a19953c49_53000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_63000000, "add_organization_property", 26);
  _call_desc.arg_0 = &(::SDOPackage::OrganizationProperty&) organization_property;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_32000000* tcd = (_0RL_cd_ca9e221a19953c49_32000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_organization_property_value(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_organization_property_value(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->set_organization_property_value(tcd->arg_0, *tcd->arg_1);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::set_organization_property_value(const char* name, const ::CORBA::Any& value)
{
  _0RL_cd_ca9e221a19953c49_32000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_73000000, "set_organization_property_value", 32);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::CORBA::Any&) value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_83000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->remove_organization_property(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->remove_organization_property(tcd->arg_0);
  else {
    try {
      tcd->result = impl->remove_organization_property(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::remove_organization_property(const char* name)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_83000000, "remove_organization_property", 29);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mSDOSystemElement_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_93000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_93000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::SDOSystemElement_var result;
};

void _0RL_cd_ca9e221a19953c49_93000000::marshalReturnedValues(cdrStream& _n)
{
  SDOPackage::SDOSystemElement::_marshalObjRef(result,_n);

}

void _0RL_cd_ca9e221a19953c49_93000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = SDOPackage::SDOSystemElement::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_ca9e221a19953c49_93000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_93000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_a3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_93000000* tcd = (_0RL_cd_ca9e221a19953c49_93000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_owner();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_owner();
  else {
    try {
      tcd->result = impl->get_owner();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::SDOSystemElement_ptr SDOPackage::_objref_Organization::get_owner()
{
  _0RL_cd_ca9e221a19953c49_93000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a3000000, "get_owner", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mSDOSystemElement_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_b3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_b3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::SDOSystemElement_var arg_0_;
  SDOPackage::SDOSystemElement_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_b3000000::marshalArguments(cdrStream& _n)
{
  SDOPackage::SDOSystemElement::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_ca9e221a19953c49_b3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = SDOPackage::SDOSystemElement::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_b3000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_b3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_b3000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_b3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_c3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_b3000000* tcd = (_0RL_cd_ca9e221a19953c49_b3000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_owner(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_owner(tcd->arg_0);
  else {
    try {
      tcd->result = impl->set_owner(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::set_owner(::SDOPackage::SDOSystemElement_ptr sdo)
{
  _0RL_cd_ca9e221a19953c49_b3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c3000000, "set_owner", 10);
  _call_desc.arg_0 = sdo;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mSDOList_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_d3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_d3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::SDOList_var result;
};

void _0RL_cd_ca9e221a19953c49_d3000000::marshalReturnedValues(cdrStream& _n)
{
  (const SDOPackage::SDOList&) result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_d3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SDOPackage::SDOList;
  (SDOPackage::SDOList&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_d3000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_d3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_e3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_d3000000* tcd = (_0RL_cd_ca9e221a19953c49_d3000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_members();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_members();
  else {
    try {
      tcd->result = impl->get_members();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::SDOList* SDOPackage::_objref_Organization::get_members()
{
  _0RL_cd_ca9e221a19953c49_d3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e3000000, "get_members", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mSDOList_e_cSDOPackage_mInternalError_e_cSDOPackage_mInvalidParameter_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_f3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_f3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::SDOList_var arg_0_;
  const SDOPackage::SDOList* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_f3000000::marshalArguments(cdrStream& _n)
{
  (const SDOPackage::SDOList&) *arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_f3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SDOPackage::SDOList;
  (SDOPackage::SDOList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_ca9e221a19953c49_f3000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_f3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_f3000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::InvalidParameter::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_f3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::InvalidParameter::_PD_repoId) ) {
    SDOPackage::InvalidParameter _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_04000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_f3000000* tcd = (_0RL_cd_ca9e221a19953c49_f3000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_members(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_members(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->set_members(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::set_members(const ::SDOPackage::SDOList& sdos)
{
  _0RL_cd_ca9e221a19953c49_f3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_04000000, "set_members", 12);
  _call_desc.arg_0 = &(::SDOPackage::SDOList&) sdos;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_f3000000* tcd = (_0RL_cd_ca9e221a19953c49_f3000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_members(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_members(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_members(*tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::add_members(const ::SDOPackage::SDOList& sdo_list)
{
  _0RL_cd_ca9e221a19953c49_f3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_14000000, "add_members", 12);
  _call_desc.arg_0 = &(::SDOPackage::SDOList&) sdo_list;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_24000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_c1000000* tcd = (_0RL_cd_ca9e221a19953c49_c1000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->remove_member(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->remove_member(tcd->arg_0);
  else {
    try {
      tcd->result = impl->remove_member(tcd->arg_0);
    }
    catch(SDOPackage::InvalidParameter& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::remove_member(const char* id)
{
  _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_24000000, "remove_member", 14);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cSDOPackage_mDependencyType_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_34000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_34000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::DependencyType result;
};

void _0RL_cd_ca9e221a19953c49_34000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_ca9e221a19953c49_34000000::unmarshalReturnedValues(cdrStream& _n)
{
  (SDOPackage::DependencyType&)result <<= _n;

}

const char* const _0RL_cd_ca9e221a19953c49_34000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_34000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_44000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_34000000* tcd = (_0RL_cd_ca9e221a19953c49_34000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_dependency();
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_dependency();
  else {
    try {
      tcd->result = impl->get_dependency();
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

SDOPackage::DependencyType SDOPackage::_objref_Organization::get_dependency()
{
  _0RL_cd_ca9e221a19953c49_34000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_44000000, "get_dependency", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSDOPackage_mDependencyType_e_cSDOPackage_mInternalError_e_cSDOPackage_mNotAvailable
class _0RL_cd_ca9e221a19953c49_54000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ca9e221a19953c49_54000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  SDOPackage::DependencyType arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ca9e221a19953c49_54000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_ca9e221a19953c49_54000000::unmarshalArguments(cdrStream& _n)
{
  (SDOPackage::DependencyType&)arg_0 <<= _n;

}

void _0RL_cd_ca9e221a19953c49_54000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ca9e221a19953c49_54000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ca9e221a19953c49_54000000::_user_exns[] = {
  SDOPackage::InternalError::_PD_repoId,
  SDOPackage::NotAvailable::_PD_repoId
};

void _0RL_cd_ca9e221a19953c49_54000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, SDOPackage::InternalError::_PD_repoId) ) {
    SDOPackage::InternalError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, SDOPackage::NotAvailable::_PD_repoId) ) {
    SDOPackage::NotAvailable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_ca9e221a19953c49_64000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ca9e221a19953c49_54000000* tcd = (_0RL_cd_ca9e221a19953c49_54000000*)cd;
  SDOPackage::_impl_Organization* impl = (SDOPackage::_impl_Organization*) svnt->_ptrToInterface(SDOPackage::Organization::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->set_dependency(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->set_dependency(tcd->arg_0);
  else {
    try {
      tcd->result = impl->set_dependency(tcd->arg_0);
    }
    catch(SDOPackage::NotAvailable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(SDOPackage::InternalError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean SDOPackage::_objref_Organization::set_dependency(::SDOPackage::DependencyType dependency)
{
  _0RL_cd_ca9e221a19953c49_54000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_64000000, "set_dependency", 15);
  _call_desc.arg_0 = dependency;

  _invoke(_call_desc);
  return _call_desc.result;


}
SDOPackage::_pof_Organization::~_pof_Organization() {}


omniObjRef*
SDOPackage::_pof_Organization::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SDOPackage::_objref_Organization(ior, id);
}


::CORBA::Boolean
SDOPackage::_pof_Organization::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SDOPackage::Organization::_PD_repoId) )
    return 1;
  
  return 0;
}

const SDOPackage::_pof_Organization _the_pof_SDOPackage_mOrganization;

SDOPackage::_impl_Organization::~_impl_Organization() {}


::CORBA::Boolean
SDOPackage::_impl_Organization::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_organization_id") ) {

    _0RL_cd_ca9e221a19953c49_03000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_13000000, "get_organization_id", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_organization_property") ) {

    _0RL_cd_ca9e221a19953c49_23000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_33000000, "get_organization_property", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_organization_property_value") ) {

    _0RL_cd_ca9e221a19953c49_41000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_43000000, "get_organization_property_value", 32, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_organization_property") ) {

    _0RL_cd_ca9e221a19953c49_53000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_63000000, "add_organization_property", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_organization_property_value") ) {

    _0RL_cd_ca9e221a19953c49_32000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_73000000, "set_organization_property_value", 32, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_organization_property") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_83000000, "remove_organization_property", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_owner") ) {

    _0RL_cd_ca9e221a19953c49_93000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_a3000000, "get_owner", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_owner") ) {

    _0RL_cd_ca9e221a19953c49_b3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_c3000000, "set_owner", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_members") ) {

    _0RL_cd_ca9e221a19953c49_d3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_e3000000, "get_members", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_members") ) {

    _0RL_cd_ca9e221a19953c49_f3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_04000000, "set_members", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_members") ) {

    _0RL_cd_ca9e221a19953c49_f3000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_14000000, "add_members", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_member") ) {

    _0RL_cd_ca9e221a19953c49_c1000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_24000000, "remove_member", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_dependency") ) {

    _0RL_cd_ca9e221a19953c49_34000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_44000000, "get_dependency", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_dependency") ) {

    _0RL_cd_ca9e221a19953c49_54000000 _call_desc(_0RL_lcfn_ca9e221a19953c49_64000000, "set_dependency", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
SDOPackage::_impl_Organization::_ptrToInterface(const char* id)
{
  if( id == ::SDOPackage::Organization::_PD_repoId )
    return (::SDOPackage::_impl_Organization*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SDOPackage::Organization::_PD_repoId) )
    return (::SDOPackage::_impl_Organization*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SDOPackage::_impl_Organization::_mostDerivedRepoId()
{
  return ::SDOPackage::Organization::_PD_repoId;
}

POA_SDOPackage::SDOSystemElement::~SDOSystemElement() {}

POA_SDOPackage::SDO::~SDO() {}

POA_SDOPackage::Configuration::~Configuration() {}

POA_SDOPackage::Monitoring::~Monitoring() {}

POA_SDOPackage::SDOService::~SDOService() {}

POA_SDOPackage::Organization::~Organization() {}

