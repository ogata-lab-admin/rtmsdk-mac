// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "DataPort.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



OpenRTM::InPortCdr_ptr OpenRTM::InPortCdr_Helper::_nil() {
  return ::OpenRTM::InPortCdr::_nil();
}

::CORBA::Boolean OpenRTM::InPortCdr_Helper::is_nil(::OpenRTM::InPortCdr_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenRTM::InPortCdr_Helper::release(::OpenRTM::InPortCdr_ptr p) {
  ::CORBA::release(p);
}

void OpenRTM::InPortCdr_Helper::marshalObjRef(::OpenRTM::InPortCdr_ptr obj, cdrStream& s) {
  ::OpenRTM::InPortCdr::_marshalObjRef(obj, s);
}

OpenRTM::InPortCdr_ptr OpenRTM::InPortCdr_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenRTM::InPortCdr::_unmarshalObjRef(s);
}

void OpenRTM::InPortCdr_Helper::duplicate(::OpenRTM::InPortCdr_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenRTM::InPortCdr_ptr
OpenRTM::InPortCdr::_duplicate(::OpenRTM::InPortCdr_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenRTM::InPortCdr_ptr
OpenRTM::InPortCdr::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenRTM::InPortCdr_ptr
OpenRTM::InPortCdr::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenRTM::InPortCdr_ptr
OpenRTM::InPortCdr::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_InPortCdr _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_InPortCdr* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_InPortCdr;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenRTM::InPortCdr::_PD_repoId = "IDL:OpenRTM/InPortCdr:1.0";


OpenRTM::_objref_InPortCdr::~_objref_InPortCdr() {
  
}


OpenRTM::_objref_InPortCdr::_objref_InPortCdr(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenRTM::InPortCdr::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenRTM::_objref_InPortCdr::_ptrToObjRef(const char* id)
{
  if( id == ::OpenRTM::InPortCdr::_PD_repoId )
    return (::OpenRTM::InPortCdr_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenRTM::InPortCdr::_PD_repoId) )
    return (::OpenRTM::InPortCdr_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenRTM_mPortStatus_i_cOpenRTM_mCdrData
class _0RL_cd_22c2aced9dc70dc8_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_22c2aced9dc70dc8_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenRTM::CdrData_var arg_0_;
  const OpenRTM::CdrData* arg_0;
  OpenRTM::PortStatus result;
};

void _0RL_cd_22c2aced9dc70dc8_00000000::marshalArguments(cdrStream& _n)
{
  (const OpenRTM::CdrData&) *arg_0 >>= _n;

}

void _0RL_cd_22c2aced9dc70dc8_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenRTM::CdrData;
  (OpenRTM::CdrData&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_22c2aced9dc70dc8_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_22c2aced9dc70dc8_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (OpenRTM::PortStatus&)result <<= _n;

}

const char* const _0RL_cd_22c2aced9dc70dc8_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_22c2aced9dc70dc8_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_22c2aced9dc70dc8_00000000* tcd = (_0RL_cd_22c2aced9dc70dc8_00000000*)cd;
  OpenRTM::_impl_InPortCdr* impl = (OpenRTM::_impl_InPortCdr*) svnt->_ptrToInterface(OpenRTM::InPortCdr::_PD_repoId);
  tcd->result = impl->put(*tcd->arg_0);


}

OpenRTM::PortStatus OpenRTM::_objref_InPortCdr::put(const ::OpenRTM::CdrData& data)
{
  _0RL_cd_22c2aced9dc70dc8_00000000 _call_desc(_0RL_lcfn_22c2aced9dc70dc8_10000000, "put", 4);
  _call_desc.arg_0 = &(::OpenRTM::CdrData&) data;

  _invoke(_call_desc);
  return _call_desc.result;


}
OpenRTM::_pof_InPortCdr::~_pof_InPortCdr() {}


omniObjRef*
OpenRTM::_pof_InPortCdr::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenRTM::_objref_InPortCdr(ior, id);
}


::CORBA::Boolean
OpenRTM::_pof_InPortCdr::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenRTM::InPortCdr::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenRTM::_pof_InPortCdr _the_pof_OpenRTM_mInPortCdr;

OpenRTM::_impl_InPortCdr::~_impl_InPortCdr() {}


::CORBA::Boolean
OpenRTM::_impl_InPortCdr::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "put") ) {

    _0RL_cd_22c2aced9dc70dc8_00000000 _call_desc(_0RL_lcfn_22c2aced9dc70dc8_10000000, "put", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenRTM::_impl_InPortCdr::_ptrToInterface(const char* id)
{
  if( id == ::OpenRTM::InPortCdr::_PD_repoId )
    return (::OpenRTM::_impl_InPortCdr*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenRTM::InPortCdr::_PD_repoId) )
    return (::OpenRTM::_impl_InPortCdr*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenRTM::_impl_InPortCdr::_mostDerivedRepoId()
{
  return ::OpenRTM::InPortCdr::_PD_repoId;
}

OpenRTM::OutPortCdr_ptr OpenRTM::OutPortCdr_Helper::_nil() {
  return ::OpenRTM::OutPortCdr::_nil();
}

::CORBA::Boolean OpenRTM::OutPortCdr_Helper::is_nil(::OpenRTM::OutPortCdr_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenRTM::OutPortCdr_Helper::release(::OpenRTM::OutPortCdr_ptr p) {
  ::CORBA::release(p);
}

void OpenRTM::OutPortCdr_Helper::marshalObjRef(::OpenRTM::OutPortCdr_ptr obj, cdrStream& s) {
  ::OpenRTM::OutPortCdr::_marshalObjRef(obj, s);
}

OpenRTM::OutPortCdr_ptr OpenRTM::OutPortCdr_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenRTM::OutPortCdr::_unmarshalObjRef(s);
}

void OpenRTM::OutPortCdr_Helper::duplicate(::OpenRTM::OutPortCdr_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenRTM::OutPortCdr_ptr
OpenRTM::OutPortCdr::_duplicate(::OpenRTM::OutPortCdr_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenRTM::OutPortCdr_ptr
OpenRTM::OutPortCdr::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenRTM::OutPortCdr_ptr
OpenRTM::OutPortCdr::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenRTM::OutPortCdr_ptr
OpenRTM::OutPortCdr::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_OutPortCdr _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_OutPortCdr* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_OutPortCdr;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenRTM::OutPortCdr::_PD_repoId = "IDL:OpenRTM/OutPortCdr:1.0";


OpenRTM::_objref_OutPortCdr::~_objref_OutPortCdr() {
  
}


OpenRTM::_objref_OutPortCdr::_objref_OutPortCdr(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenRTM::OutPortCdr::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenRTM::_objref_OutPortCdr::_ptrToObjRef(const char* id)
{
  if( id == ::OpenRTM::OutPortCdr::_PD_repoId )
    return (::OpenRTM::OutPortCdr_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenRTM::OutPortCdr::_PD_repoId) )
    return (::OpenRTM::OutPortCdr_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenRTM_mPortStatus_o_cOpenRTM_mCdrData
class _0RL_cd_22c2aced9dc70dc8_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_22c2aced9dc70dc8_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenRTM::CdrData_var arg_0;
  OpenRTM::PortStatus result;
};

void _0RL_cd_22c2aced9dc70dc8_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const OpenRTM::CdrData&) arg_0 >>= _n;

}

void _0RL_cd_22c2aced9dc70dc8_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (OpenRTM::PortStatus&)result <<= _n;
  arg_0 = new OpenRTM::CdrData;
  (OpenRTM::CdrData&)arg_0 <<= _n;

}

const char* const _0RL_cd_22c2aced9dc70dc8_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_22c2aced9dc70dc8_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_22c2aced9dc70dc8_20000000* tcd = (_0RL_cd_22c2aced9dc70dc8_20000000*)cd;
  OpenRTM::_impl_OutPortCdr* impl = (OpenRTM::_impl_OutPortCdr*) svnt->_ptrToInterface(OpenRTM::OutPortCdr::_PD_repoId);
  tcd->result = impl->get(tcd->arg_0.out());


}

OpenRTM::PortStatus OpenRTM::_objref_OutPortCdr::get(::OpenRTM::CdrData_out data)
{
  _0RL_cd_22c2aced9dc70dc8_20000000 _call_desc(_0RL_lcfn_22c2aced9dc70dc8_30000000, "get", 4);


  _invoke(_call_desc);
  data = _call_desc.arg_0._retn();
  return _call_desc.result;


}
OpenRTM::_pof_OutPortCdr::~_pof_OutPortCdr() {}


omniObjRef*
OpenRTM::_pof_OutPortCdr::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenRTM::_objref_OutPortCdr(ior, id);
}


::CORBA::Boolean
OpenRTM::_pof_OutPortCdr::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenRTM::OutPortCdr::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenRTM::_pof_OutPortCdr _the_pof_OpenRTM_mOutPortCdr;

OpenRTM::_impl_OutPortCdr::~_impl_OutPortCdr() {}


::CORBA::Boolean
OpenRTM::_impl_OutPortCdr::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get") ) {

    _0RL_cd_22c2aced9dc70dc8_20000000 _call_desc(_0RL_lcfn_22c2aced9dc70dc8_30000000, "get", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenRTM::_impl_OutPortCdr::_ptrToInterface(const char* id)
{
  if( id == ::OpenRTM::OutPortCdr::_PD_repoId )
    return (::OpenRTM::_impl_OutPortCdr*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenRTM::OutPortCdr::_PD_repoId) )
    return (::OpenRTM::_impl_OutPortCdr*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenRTM::_impl_OutPortCdr::_mostDerivedRepoId()
{
  return ::OpenRTM::OutPortCdr::_PD_repoId;
}

POA_OpenRTM::InPortCdr::~InPortCdr() {}

POA_OpenRTM::OutPortCdr::~OutPortCdr() {}

