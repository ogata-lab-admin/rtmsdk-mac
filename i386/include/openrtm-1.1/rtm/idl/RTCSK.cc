// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "RTC.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



RTC::ComponentAction_ptr RTC::ComponentAction_Helper::_nil() {
  return ::RTC::ComponentAction::_nil();
}

::CORBA::Boolean RTC::ComponentAction_Helper::is_nil(::RTC::ComponentAction_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::ComponentAction_Helper::release(::RTC::ComponentAction_ptr p) {
  ::CORBA::release(p);
}

void RTC::ComponentAction_Helper::marshalObjRef(::RTC::ComponentAction_ptr obj, cdrStream& s) {
  ::RTC::ComponentAction::_marshalObjRef(obj, s);
}

RTC::ComponentAction_ptr RTC::ComponentAction_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::ComponentAction::_unmarshalObjRef(s);
}

void RTC::ComponentAction_Helper::duplicate(::RTC::ComponentAction_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::ComponentAction_ptr
RTC::ComponentAction::_duplicate(::RTC::ComponentAction_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::ComponentAction_ptr
RTC::ComponentAction::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::ComponentAction_ptr
RTC::ComponentAction::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::ComponentAction_ptr
RTC::ComponentAction::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ComponentAction _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ComponentAction* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ComponentAction;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::ComponentAction::_PD_repoId = "IDL:omg.org/RTC/ComponentAction:1.0";


RTC::_objref_ComponentAction::~_objref_ComponentAction() {
  
}


RTC::_objref_ComponentAction::_objref_ComponentAction(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::ComponentAction::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_ComponentAction::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t
class _0RL_cd_bf82f9885dac07a6_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_initialize();


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_initialize()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_10000000, "on_initialize", 14);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_finalize();


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_finalize()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_20000000, "on_finalize", 12);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_clong
class _0RL_cd_bf82f9885dac07a6_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContextHandle_t arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_30000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_30000000::unmarshalArguments(cdrStream& _n)
{
  (RTC::ExecutionContextHandle_t&)arg_0 <<= _n;

}

void _0RL_cd_bf82f9885dac07a6_30000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_30000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_30000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_startup(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_startup(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_40000000, "on_startup", 11);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_shutdown(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_shutdown(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_50000000, "on_shutdown", 12);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_activated(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_activated(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_60000000, "on_activated", 13);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_deactivated(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_deactivated(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_70000000, "on_deactivated", 15);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_aborting(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_aborting(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_80000000, "on_aborting", 12);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_error(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_error(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_90000000, "on_error", 9);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_ComponentAction* impl = (RTC::_impl_ComponentAction*) svnt->_ptrToInterface(RTC::ComponentAction::_PD_repoId);
  tcd->result = impl->on_reset(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ComponentAction::on_reset(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a0000000, "on_reset", 9);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_ComponentAction::~_pof_ComponentAction() {}


omniObjRef*
RTC::_pof_ComponentAction::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_ComponentAction(ior, id);
}


::CORBA::Boolean
RTC::_pof_ComponentAction::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_ComponentAction _the_pof_RTC_mComponentAction;

RTC::_impl_ComponentAction::~_impl_ComponentAction() {}


::CORBA::Boolean
RTC::_impl_ComponentAction::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "on_initialize") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_10000000, "on_initialize", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_finalize") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_20000000, "on_finalize", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_startup") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_40000000, "on_startup", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_shutdown") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_50000000, "on_shutdown", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_activated") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_60000000, "on_activated", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_deactivated") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_70000000, "on_deactivated", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_aborting") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_80000000, "on_aborting", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_error") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_90000000, "on_error", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_reset") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a0000000, "on_reset", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_ComponentAction::_ptrToInterface(const char* id)
{
  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_ComponentAction::_mostDerivedRepoId()
{
  return ::RTC::ComponentAction::_PD_repoId;
}

RTC::LightweightRTObject_ptr RTC::LightweightRTObject_Helper::_nil() {
  return ::RTC::LightweightRTObject::_nil();
}

::CORBA::Boolean RTC::LightweightRTObject_Helper::is_nil(::RTC::LightweightRTObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::LightweightRTObject_Helper::release(::RTC::LightweightRTObject_ptr p) {
  ::CORBA::release(p);
}

void RTC::LightweightRTObject_Helper::marshalObjRef(::RTC::LightweightRTObject_ptr obj, cdrStream& s) {
  ::RTC::LightweightRTObject::_marshalObjRef(obj, s);
}

RTC::LightweightRTObject_ptr RTC::LightweightRTObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::LightweightRTObject::_unmarshalObjRef(s);
}

void RTC::LightweightRTObject_Helper::duplicate(::RTC::LightweightRTObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::LightweightRTObject_ptr
RTC::LightweightRTObject::_duplicate(::RTC::LightweightRTObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::LightweightRTObject_ptr
RTC::LightweightRTObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::LightweightRTObject_ptr
RTC::LightweightRTObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::LightweightRTObject_ptr
RTC::LightweightRTObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_LightweightRTObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_LightweightRTObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_LightweightRTObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::LightweightRTObject::_PD_repoId = "IDL:omg.org/RTC/LightweightRTObject:1.0";


RTC::_objref_LightweightRTObject::~_objref_LightweightRTObject() {
  
}


RTC::_objref_LightweightRTObject::_objref_LightweightRTObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::LightweightRTObject::_PD_repoId, ior, id, 1),
   _objref_ComponentAction(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_LightweightRTObject::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;
  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;
  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->initialize();


}

RTC::ReturnCode_t RTC::_objref_LightweightRTObject::initialize()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b0000000, "initialize", 11);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->finalize();


}

RTC::ReturnCode_t RTC::_objref_LightweightRTObject::finalize()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c0000000, "finalize", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cRTC_mExecutionContext
class _0RL_cd_bf82f9885dac07a6_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContext_var arg_0_;
  RTC::ExecutionContext_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_bf82f9885dac07a6_d0000000::marshalArguments(cdrStream& _n)
{
  RTC::ExecutionContext_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_bf82f9885dac07a6_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::ExecutionContext_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_d0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_bf82f9885dac07a6_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_bf82f9885dac07a6_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_d0000000* tcd = (_0RL_cd_bf82f9885dac07a6_d0000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->is_alive(tcd->arg_0);


}

::CORBA::Boolean RTC::_objref_LightweightRTObject::is_alive(::RTC::ExecutionContext_ptr exec_context)
{
  _0RL_cd_bf82f9885dac07a6_d0000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e0000000, "is_alive", 9);
  _call_desc.arg_0 = exec_context;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->exit();


}

RTC::ReturnCode_t RTC::_objref_LightweightRTObject::exit()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_f0000000, "exit", 5);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cRTC_mExecutionContext
class _0RL_cd_bf82f9885dac07a6_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContext_var arg_0_;
  RTC::ExecutionContext_ptr arg_0;
  RTC::ExecutionContextHandle_t result;
};

void _0RL_cd_bf82f9885dac07a6_01000000::marshalArguments(cdrStream& _n)
{
  RTC::ExecutionContext_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_bf82f9885dac07a6_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::ExecutionContext_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_01000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ExecutionContextHandle_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_01000000* tcd = (_0RL_cd_bf82f9885dac07a6_01000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->attach_context(tcd->arg_0);


}

RTC::ExecutionContextHandle_t RTC::_objref_LightweightRTObject::attach_context(::RTC::ExecutionContext_ptr exec_context)
{
  _0RL_cd_bf82f9885dac07a6_01000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_11000000, "attach_context", 15);
  _call_desc.arg_0 = exec_context;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->detach_context(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_LightweightRTObject::detach_context(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_21000000, "detach_context", 15);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mExecutionContext_i_clong
class _0RL_cd_bf82f9885dac07a6_31000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_31000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContextHandle_t arg_0;
  RTC::ExecutionContext_var result;
};

void _0RL_cd_bf82f9885dac07a6_31000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_31000000::unmarshalArguments(cdrStream& _n)
{
  (RTC::ExecutionContextHandle_t&)arg_0 <<= _n;

}

void _0RL_cd_bf82f9885dac07a6_31000000::marshalReturnedValues(cdrStream& _n)
{
  RTC::ExecutionContext_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_bf82f9885dac07a6_31000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = RTC::ExecutionContext_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_bf82f9885dac07a6_31000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_41000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_31000000* tcd = (_0RL_cd_bf82f9885dac07a6_31000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->get_context(tcd->arg_0);


}

RTC::ExecutionContext_ptr RTC::_objref_LightweightRTObject::get_context(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_31000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_41000000, "get_context", 12);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mExecutionContextList
class _0RL_cd_bf82f9885dac07a6_51000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_51000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContextList_var result;
};

void _0RL_cd_bf82f9885dac07a6_51000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::ExecutionContextList&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_51000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::ExecutionContextList;
  (RTC::ExecutionContextList&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_51000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_51000000* tcd = (_0RL_cd_bf82f9885dac07a6_51000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->get_owned_contexts();


}

RTC::ExecutionContextList* RTC::_objref_LightweightRTObject::get_owned_contexts()
{
  _0RL_cd_bf82f9885dac07a6_51000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_61000000, "get_owned_contexts", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_51000000* tcd = (_0RL_cd_bf82f9885dac07a6_51000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->get_participating_contexts();


}

RTC::ExecutionContextList* RTC::_objref_LightweightRTObject::get_participating_contexts()
{
  _0RL_cd_bf82f9885dac07a6_51000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_71000000, "get_participating_contexts", 27);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_01000000* tcd = (_0RL_cd_bf82f9885dac07a6_01000000*)cd;
  RTC::_impl_LightweightRTObject* impl = (RTC::_impl_LightweightRTObject*) svnt->_ptrToInterface(RTC::LightweightRTObject::_PD_repoId);
  tcd->result = impl->get_context_handle(tcd->arg_0);


}

RTC::ExecutionContextHandle_t RTC::_objref_LightweightRTObject::get_context_handle(::RTC::ExecutionContext_ptr cxt)
{
  _0RL_cd_bf82f9885dac07a6_01000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_81000000, "get_context_handle", 19);
  _call_desc.arg_0 = cxt;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_LightweightRTObject::~_pof_LightweightRTObject() {}


omniObjRef*
RTC::_pof_LightweightRTObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_LightweightRTObject(ior, id);
}


::CORBA::Boolean
RTC::_pof_LightweightRTObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_LightweightRTObject _the_pof_RTC_mLightweightRTObject;

RTC::_impl_LightweightRTObject::~_impl_LightweightRTObject() {}


::CORBA::Boolean
RTC::_impl_LightweightRTObject::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "initialize") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b0000000, "initialize", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "finalize") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c0000000, "finalize", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "is_alive") ) {

    _0RL_cd_bf82f9885dac07a6_d0000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e0000000, "is_alive", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "exit") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_f0000000, "exit", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "attach_context") ) {

    _0RL_cd_bf82f9885dac07a6_01000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_11000000, "attach_context", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "detach_context") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_21000000, "detach_context", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_context") ) {

    _0RL_cd_bf82f9885dac07a6_31000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_41000000, "get_context", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_owned_contexts") ) {

    _0RL_cd_bf82f9885dac07a6_51000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_61000000, "get_owned_contexts", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_participating_contexts") ) {

    _0RL_cd_bf82f9885dac07a6_51000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_71000000, "get_participating_contexts", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_context_handle") ) {

    _0RL_cd_bf82f9885dac07a6_01000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_81000000, "get_context_handle", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ComponentAction*)this)->
      _impl_ComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_LightweightRTObject::_ptrToInterface(const char* id)
{
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;
  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;
  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_LightweightRTObject::_mostDerivedRepoId()
{
  return ::RTC::LightweightRTObject::_PD_repoId;
}

RTC::ExecutionContext_ptr RTC::ExecutionContext_Helper::_nil() {
  return ::RTC::ExecutionContext::_nil();
}

::CORBA::Boolean RTC::ExecutionContext_Helper::is_nil(::RTC::ExecutionContext_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::ExecutionContext_Helper::release(::RTC::ExecutionContext_ptr p) {
  ::CORBA::release(p);
}

void RTC::ExecutionContext_Helper::marshalObjRef(::RTC::ExecutionContext_ptr obj, cdrStream& s) {
  ::RTC::ExecutionContext::_marshalObjRef(obj, s);
}

RTC::ExecutionContext_ptr RTC::ExecutionContext_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::ExecutionContext::_unmarshalObjRef(s);
}

void RTC::ExecutionContext_Helper::duplicate(::RTC::ExecutionContext_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::ExecutionContext_ptr
RTC::ExecutionContext::_duplicate(::RTC::ExecutionContext_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::ExecutionContext_ptr
RTC::ExecutionContext::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::ExecutionContext_ptr
RTC::ExecutionContext::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::ExecutionContext_ptr
RTC::ExecutionContext::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExecutionContext _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExecutionContext* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExecutionContext;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::ExecutionContext::_PD_repoId = "IDL:omg.org/RTC/ExecutionContext:1.0";


RTC::_objref_ExecutionContext::~_objref_ExecutionContext() {
  
}


RTC::_objref_ExecutionContext::_objref_ExecutionContext(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::ExecutionContext::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_ExecutionContext::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::ExecutionContext::_PD_repoId )
    return (::RTC::ExecutionContext_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::ExecutionContext::_PD_repoId) )
    return (::RTC::ExecutionContext_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_bf82f9885dac07a6_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_91000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_bf82f9885dac07a6_91000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_bf82f9885dac07a6_91000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_bf82f9885dac07a6_91000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_91000000* tcd = (_0RL_cd_bf82f9885dac07a6_91000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->is_running();


}

::CORBA::Boolean RTC::_objref_ExecutionContext::is_running()
{
  _0RL_cd_bf82f9885dac07a6_91000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a1000000, "is_running", 11);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->start();


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::start()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b1000000, "start", 6);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->stop();


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::stop()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c1000000, "stop", 5);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cdouble
class _0RL_cd_bf82f9885dac07a6_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_d1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double result;
};

void _0RL_cd_bf82f9885dac07a6_d1000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_d1000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Double&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_d1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_d1000000* tcd = (_0RL_cd_bf82f9885dac07a6_d1000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->get_rate();


}

::CORBA::Double RTC::_objref_ExecutionContext::get_rate()
{
  _0RL_cd_bf82f9885dac07a6_d1000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e1000000, "get_rate", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cdouble
class _0RL_cd_bf82f9885dac07a6_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_f1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_f1000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_f1000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;

}

void _0RL_cd_bf82f9885dac07a6_f1000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_f1000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_f1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_f1000000* tcd = (_0RL_cd_bf82f9885dac07a6_f1000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->set_rate(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::set_rate(::CORBA::Double rate)
{
  _0RL_cd_bf82f9885dac07a6_f1000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_02000000, "set_rate", 9);
  _call_desc.arg_0 = rate;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cRTC_mLightweightRTObject
class _0RL_cd_bf82f9885dac07a6_12000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_12000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::LightweightRTObject_var arg_0_;
  RTC::LightweightRTObject_ptr arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_12000000::marshalArguments(cdrStream& _n)
{
  RTC::LightweightRTObject::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_bf82f9885dac07a6_12000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::LightweightRTObject::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_12000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_12000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_12000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_12000000* tcd = (_0RL_cd_bf82f9885dac07a6_12000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->add_component(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::add_component(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_22000000, "add_component", 14);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_12000000* tcd = (_0RL_cd_bf82f9885dac07a6_12000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->remove_component(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::remove_component(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_32000000, "remove_component", 17);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_12000000* tcd = (_0RL_cd_bf82f9885dac07a6_12000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->activate_component(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::activate_component(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_42000000, "activate_component", 19);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_12000000* tcd = (_0RL_cd_bf82f9885dac07a6_12000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->deactivate_component(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::deactivate_component(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_52000000, "deactivate_component", 21);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_12000000* tcd = (_0RL_cd_bf82f9885dac07a6_12000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->reset_component(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_ExecutionContext::reset_component(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_62000000, "reset_component", 16);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mLifeCycleState_i_cRTC_mLightweightRTObject
class _0RL_cd_bf82f9885dac07a6_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_72000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::LightweightRTObject_var arg_0_;
  RTC::LightweightRTObject_ptr arg_0;
  RTC::LifeCycleState result;
};

void _0RL_cd_bf82f9885dac07a6_72000000::marshalArguments(cdrStream& _n)
{
  RTC::LightweightRTObject::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_bf82f9885dac07a6_72000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::LightweightRTObject::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_72000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_72000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::LifeCycleState&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_72000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_72000000* tcd = (_0RL_cd_bf82f9885dac07a6_72000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->get_component_state(tcd->arg_0);


}

RTC::LifeCycleState RTC::_objref_ExecutionContext::get_component_state(::RTC::LightweightRTObject_ptr comp)
{
  _0RL_cd_bf82f9885dac07a6_72000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_82000000, "get_component_state", 20);
  _call_desc.arg_0 = comp;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mExecutionKind
class _0RL_cd_bf82f9885dac07a6_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionKind result;
};

void _0RL_cd_bf82f9885dac07a6_92000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ExecutionKind&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_92000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_92000000* tcd = (_0RL_cd_bf82f9885dac07a6_92000000*)cd;
  RTC::_impl_ExecutionContext* impl = (RTC::_impl_ExecutionContext*) svnt->_ptrToInterface(RTC::ExecutionContext::_PD_repoId);
  tcd->result = impl->get_kind();


}

RTC::ExecutionKind RTC::_objref_ExecutionContext::get_kind()
{
  _0RL_cd_bf82f9885dac07a6_92000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a2000000, "get_kind", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_ExecutionContext::~_pof_ExecutionContext() {}


omniObjRef*
RTC::_pof_ExecutionContext::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_ExecutionContext(ior, id);
}


::CORBA::Boolean
RTC::_pof_ExecutionContext::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::ExecutionContext::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_ExecutionContext _the_pof_RTC_mExecutionContext;

RTC::_impl_ExecutionContext::~_impl_ExecutionContext() {}


::CORBA::Boolean
RTC::_impl_ExecutionContext::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "is_running") ) {

    _0RL_cd_bf82f9885dac07a6_91000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a1000000, "is_running", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "start") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b1000000, "start", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c1000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_rate") ) {

    _0RL_cd_bf82f9885dac07a6_d1000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e1000000, "get_rate", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_rate") ) {

    _0RL_cd_bf82f9885dac07a6_f1000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_02000000, "set_rate", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "add_component") ) {

    _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_22000000, "add_component", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "remove_component") ) {

    _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_32000000, "remove_component", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "activate_component") ) {

    _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_42000000, "activate_component", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deactivate_component") ) {

    _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_52000000, "deactivate_component", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "reset_component") ) {

    _0RL_cd_bf82f9885dac07a6_12000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_62000000, "reset_component", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_component_state") ) {

    _0RL_cd_bf82f9885dac07a6_72000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_82000000, "get_component_state", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_kind") ) {

    _0RL_cd_bf82f9885dac07a6_92000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a2000000, "get_kind", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_ExecutionContext::_ptrToInterface(const char* id)
{
  if( id == ::RTC::ExecutionContext::_PD_repoId )
    return (::RTC::_impl_ExecutionContext*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::ExecutionContext::_PD_repoId) )
    return (::RTC::_impl_ExecutionContext*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_ExecutionContext::_mostDerivedRepoId()
{
  return ::RTC::ExecutionContext::_PD_repoId;
}

RTC::DataFlowComponentAction_ptr RTC::DataFlowComponentAction_Helper::_nil() {
  return ::RTC::DataFlowComponentAction::_nil();
}

::CORBA::Boolean RTC::DataFlowComponentAction_Helper::is_nil(::RTC::DataFlowComponentAction_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::DataFlowComponentAction_Helper::release(::RTC::DataFlowComponentAction_ptr p) {
  ::CORBA::release(p);
}

void RTC::DataFlowComponentAction_Helper::marshalObjRef(::RTC::DataFlowComponentAction_ptr obj, cdrStream& s) {
  ::RTC::DataFlowComponentAction::_marshalObjRef(obj, s);
}

RTC::DataFlowComponentAction_ptr RTC::DataFlowComponentAction_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::DataFlowComponentAction::_unmarshalObjRef(s);
}

void RTC::DataFlowComponentAction_Helper::duplicate(::RTC::DataFlowComponentAction_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::DataFlowComponentAction_ptr
RTC::DataFlowComponentAction::_duplicate(::RTC::DataFlowComponentAction_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::DataFlowComponentAction_ptr
RTC::DataFlowComponentAction::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::DataFlowComponentAction_ptr
RTC::DataFlowComponentAction::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::DataFlowComponentAction_ptr
RTC::DataFlowComponentAction::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DataFlowComponentAction _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DataFlowComponentAction* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DataFlowComponentAction;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::DataFlowComponentAction::_PD_repoId = "IDL:omg.org/RTC/DataFlowComponentAction:1.0";


RTC::_objref_DataFlowComponentAction::~_objref_DataFlowComponentAction() {
  
}


RTC::_objref_DataFlowComponentAction::_objref_DataFlowComponentAction(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::DataFlowComponentAction::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_DataFlowComponentAction::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::DataFlowComponentAction::_PD_repoId )
    return (::RTC::DataFlowComponentAction_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::DataFlowComponentAction::_PD_repoId) )
    return (::RTC::DataFlowComponentAction_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_DataFlowComponentAction* impl = (RTC::_impl_DataFlowComponentAction*) svnt->_ptrToInterface(RTC::DataFlowComponentAction::_PD_repoId);
  tcd->result = impl->on_execute(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_DataFlowComponentAction::on_execute(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b2000000, "on_execute", 11);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_DataFlowComponentAction* impl = (RTC::_impl_DataFlowComponentAction*) svnt->_ptrToInterface(RTC::DataFlowComponentAction::_PD_repoId);
  tcd->result = impl->on_state_update(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_DataFlowComponentAction::on_state_update(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c2000000, "on_state_update", 16);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_DataFlowComponentAction* impl = (RTC::_impl_DataFlowComponentAction*) svnt->_ptrToInterface(RTC::DataFlowComponentAction::_PD_repoId);
  tcd->result = impl->on_rate_changed(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_DataFlowComponentAction::on_rate_changed(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_d2000000, "on_rate_changed", 16);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_DataFlowComponentAction::~_pof_DataFlowComponentAction() {}


omniObjRef*
RTC::_pof_DataFlowComponentAction::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_DataFlowComponentAction(ior, id);
}


::CORBA::Boolean
RTC::_pof_DataFlowComponentAction::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::DataFlowComponentAction::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_DataFlowComponentAction _the_pof_RTC_mDataFlowComponentAction;

RTC::_impl_DataFlowComponentAction::~_impl_DataFlowComponentAction() {}


::CORBA::Boolean
RTC::_impl_DataFlowComponentAction::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "on_execute") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b2000000, "on_execute", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_state_update") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c2000000, "on_state_update", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "on_rate_changed") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_d2000000, "on_rate_changed", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_DataFlowComponentAction::_ptrToInterface(const char* id)
{
  if( id == ::RTC::DataFlowComponentAction::_PD_repoId )
    return (::RTC::_impl_DataFlowComponentAction*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::DataFlowComponentAction::_PD_repoId) )
    return (::RTC::_impl_DataFlowComponentAction*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_DataFlowComponentAction::_mostDerivedRepoId()
{
  return ::RTC::DataFlowComponentAction::_PD_repoId;
}

RTC::DataFlowComponent_ptr RTC::DataFlowComponent_Helper::_nil() {
  return ::RTC::DataFlowComponent::_nil();
}

::CORBA::Boolean RTC::DataFlowComponent_Helper::is_nil(::RTC::DataFlowComponent_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::DataFlowComponent_Helper::release(::RTC::DataFlowComponent_ptr p) {
  ::CORBA::release(p);
}

void RTC::DataFlowComponent_Helper::marshalObjRef(::RTC::DataFlowComponent_ptr obj, cdrStream& s) {
  ::RTC::DataFlowComponent::_marshalObjRef(obj, s);
}

RTC::DataFlowComponent_ptr RTC::DataFlowComponent_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::DataFlowComponent::_unmarshalObjRef(s);
}

void RTC::DataFlowComponent_Helper::duplicate(::RTC::DataFlowComponent_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::DataFlowComponent_ptr
RTC::DataFlowComponent::_duplicate(::RTC::DataFlowComponent_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::DataFlowComponent_ptr
RTC::DataFlowComponent::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::DataFlowComponent_ptr
RTC::DataFlowComponent::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::DataFlowComponent_ptr
RTC::DataFlowComponent::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DataFlowComponent _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DataFlowComponent* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DataFlowComponent;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::DataFlowComponent::_PD_repoId = "IDL:omg.org/RTC/DataFlowComponent:1.0";


RTC::_objref_DataFlowComponent::~_objref_DataFlowComponent() {
  
}


RTC::_objref_DataFlowComponent::_objref_DataFlowComponent(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::DataFlowComponent::_PD_repoId, ior, id, 1),
   _objref_LightweightRTObject(ior, id),
   _objref_DataFlowComponentAction(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_DataFlowComponent::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::DataFlowComponent::_PD_repoId )
    return (::RTC::DataFlowComponent_ptr) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;

  if( id == ::RTC::DataFlowComponentAction::_PD_repoId )
    return (::RTC::DataFlowComponentAction_ptr) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::DataFlowComponent::_PD_repoId) )
    return (::RTC::DataFlowComponent_ptr) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;

  if( omni::strMatch(id, ::RTC::DataFlowComponentAction::_PD_repoId) )
    return (::RTC::DataFlowComponentAction_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

RTC::_pof_DataFlowComponent::~_pof_DataFlowComponent() {}


omniObjRef*
RTC::_pof_DataFlowComponent::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_DataFlowComponent(ior, id);
}


::CORBA::Boolean
RTC::_pof_DataFlowComponent::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::DataFlowComponent::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::LightweightRTObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::DataFlowComponentAction::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_DataFlowComponent _the_pof_RTC_mDataFlowComponent;

RTC::_impl_DataFlowComponent::~_impl_DataFlowComponent() {}


::CORBA::Boolean
RTC::_impl_DataFlowComponent::_dispatch(omniCallHandle& _handle)
{
  

  
#ifndef _MSC_VER
  if( _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LightweightRTObject*)this)->
      _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_DataFlowComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_DataFlowComponentAction*)this)->
      _impl_DataFlowComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_DataFlowComponent::_ptrToInterface(const char* id)
{
  if( id == ::RTC::DataFlowComponent::_PD_repoId )
    return (::RTC::_impl_DataFlowComponent*) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( id == ::RTC::DataFlowComponentAction::_PD_repoId )
    return (::RTC::_impl_DataFlowComponentAction*) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::DataFlowComponent::_PD_repoId) )
    return (::RTC::_impl_DataFlowComponent*) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( omni::strMatch(id, ::RTC::DataFlowComponentAction::_PD_repoId) )
    return (::RTC::_impl_DataFlowComponentAction*) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_DataFlowComponent::_mostDerivedRepoId()
{
  return ::RTC::DataFlowComponent::_PD_repoId;
}

RTC::Fsm_ptr RTC::Fsm_Helper::_nil() {
  return ::RTC::Fsm::_nil();
}

::CORBA::Boolean RTC::Fsm_Helper::is_nil(::RTC::Fsm_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::Fsm_Helper::release(::RTC::Fsm_ptr p) {
  ::CORBA::release(p);
}

void RTC::Fsm_Helper::marshalObjRef(::RTC::Fsm_ptr obj, cdrStream& s) {
  ::RTC::Fsm::_marshalObjRef(obj, s);
}

RTC::Fsm_ptr RTC::Fsm_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::Fsm::_unmarshalObjRef(s);
}

void RTC::Fsm_Helper::duplicate(::RTC::Fsm_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::Fsm_ptr
RTC::Fsm::_duplicate(::RTC::Fsm_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::Fsm_ptr
RTC::Fsm::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::Fsm_ptr
RTC::Fsm::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::Fsm_ptr
RTC::Fsm::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Fsm _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Fsm* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Fsm;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::Fsm::_PD_repoId = "IDL:omg.org/RTC/Fsm:1.0";


RTC::_objref_Fsm::~_objref_Fsm() {
  
}


RTC::_objref_Fsm::_objref_Fsm(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::Fsm::_PD_repoId, ior, id, 1),
   _objref_LightweightRTObject(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_Fsm::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::Fsm::_PD_repoId )
    return (::RTC::Fsm_ptr) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::Fsm::_PD_repoId) )
    return (::RTC::Fsm_ptr) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

RTC::_pof_Fsm::~_pof_Fsm() {}


omniObjRef*
RTC::_pof_Fsm::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_Fsm(ior, id);
}


::CORBA::Boolean
RTC::_pof_Fsm::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::Fsm::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::LightweightRTObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_Fsm _the_pof_RTC_mFsm;

RTC::_impl_Fsm::~_impl_Fsm() {}


::CORBA::Boolean
RTC::_impl_Fsm::_dispatch(omniCallHandle& _handle)
{
  

  
#ifndef _MSC_VER
  if( _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LightweightRTObject*)this)->
      _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_Fsm::_ptrToInterface(const char* id)
{
  if( id == ::RTC::Fsm::_PD_repoId )
    return (::RTC::_impl_Fsm*) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::Fsm::_PD_repoId) )
    return (::RTC::_impl_Fsm*) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_Fsm::_mostDerivedRepoId()
{
  return ::RTC::Fsm::_PD_repoId;
}

RTC::FsmParticipantAction_ptr RTC::FsmParticipantAction_Helper::_nil() {
  return ::RTC::FsmParticipantAction::_nil();
}

::CORBA::Boolean RTC::FsmParticipantAction_Helper::is_nil(::RTC::FsmParticipantAction_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::FsmParticipantAction_Helper::release(::RTC::FsmParticipantAction_ptr p) {
  ::CORBA::release(p);
}

void RTC::FsmParticipantAction_Helper::marshalObjRef(::RTC::FsmParticipantAction_ptr obj, cdrStream& s) {
  ::RTC::FsmParticipantAction::_marshalObjRef(obj, s);
}

RTC::FsmParticipantAction_ptr RTC::FsmParticipantAction_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::FsmParticipantAction::_unmarshalObjRef(s);
}

void RTC::FsmParticipantAction_Helper::duplicate(::RTC::FsmParticipantAction_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::FsmParticipantAction_ptr
RTC::FsmParticipantAction::_duplicate(::RTC::FsmParticipantAction_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::FsmParticipantAction_ptr
RTC::FsmParticipantAction::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::FsmParticipantAction_ptr
RTC::FsmParticipantAction::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::FsmParticipantAction_ptr
RTC::FsmParticipantAction::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FsmParticipantAction _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FsmParticipantAction* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FsmParticipantAction;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::FsmParticipantAction::_PD_repoId = "IDL:omg.org/RTC/FsmParticipantAction:1.0";


RTC::_objref_FsmParticipantAction::~_objref_FsmParticipantAction() {
  
}


RTC::_objref_FsmParticipantAction::_objref_FsmParticipantAction(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::FsmParticipantAction::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_FsmParticipantAction::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::FsmParticipantAction::_PD_repoId )
    return (::RTC::FsmParticipantAction_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::FsmParticipantAction::_PD_repoId) )
    return (::RTC::FsmParticipantAction_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_FsmParticipantAction* impl = (RTC::_impl_FsmParticipantAction*) svnt->_ptrToInterface(RTC::FsmParticipantAction::_PD_repoId);
  tcd->result = impl->on_action(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_FsmParticipantAction::on_action(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e2000000, "on_action", 10);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_FsmParticipantAction::~_pof_FsmParticipantAction() {}


omniObjRef*
RTC::_pof_FsmParticipantAction::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_FsmParticipantAction(ior, id);
}


::CORBA::Boolean
RTC::_pof_FsmParticipantAction::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::FsmParticipantAction::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_FsmParticipantAction _the_pof_RTC_mFsmParticipantAction;

RTC::_impl_FsmParticipantAction::~_impl_FsmParticipantAction() {}


::CORBA::Boolean
RTC::_impl_FsmParticipantAction::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "on_action") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e2000000, "on_action", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_FsmParticipantAction::_ptrToInterface(const char* id)
{
  if( id == ::RTC::FsmParticipantAction::_PD_repoId )
    return (::RTC::_impl_FsmParticipantAction*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::FsmParticipantAction::_PD_repoId) )
    return (::RTC::_impl_FsmParticipantAction*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_FsmParticipantAction::_mostDerivedRepoId()
{
  return ::RTC::FsmParticipantAction::_PD_repoId;
}

RTC::FsmParticipant_ptr RTC::FsmParticipant_Helper::_nil() {
  return ::RTC::FsmParticipant::_nil();
}

::CORBA::Boolean RTC::FsmParticipant_Helper::is_nil(::RTC::FsmParticipant_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::FsmParticipant_Helper::release(::RTC::FsmParticipant_ptr p) {
  ::CORBA::release(p);
}

void RTC::FsmParticipant_Helper::marshalObjRef(::RTC::FsmParticipant_ptr obj, cdrStream& s) {
  ::RTC::FsmParticipant::_marshalObjRef(obj, s);
}

RTC::FsmParticipant_ptr RTC::FsmParticipant_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::FsmParticipant::_unmarshalObjRef(s);
}

void RTC::FsmParticipant_Helper::duplicate(::RTC::FsmParticipant_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::FsmParticipant_ptr
RTC::FsmParticipant::_duplicate(::RTC::FsmParticipant_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::FsmParticipant_ptr
RTC::FsmParticipant::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::FsmParticipant_ptr
RTC::FsmParticipant::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::FsmParticipant_ptr
RTC::FsmParticipant::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FsmParticipant _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FsmParticipant* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FsmParticipant;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::FsmParticipant::_PD_repoId = "IDL:omg.org/RTC/FsmParticipant:1.0";


RTC::_objref_FsmParticipant::~_objref_FsmParticipant() {
  
}


RTC::_objref_FsmParticipant::_objref_FsmParticipant(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::FsmParticipant::_PD_repoId, ior, id, 1),
   _objref_LightweightRTObject(ior, id),
   _objref_FsmParticipantAction(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_FsmParticipant::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::FsmParticipant::_PD_repoId )
    return (::RTC::FsmParticipant_ptr) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;

  if( id == ::RTC::FsmParticipantAction::_PD_repoId )
    return (::RTC::FsmParticipantAction_ptr) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::FsmParticipant::_PD_repoId) )
    return (::RTC::FsmParticipant_ptr) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;

  if( omni::strMatch(id, ::RTC::FsmParticipantAction::_PD_repoId) )
    return (::RTC::FsmParticipantAction_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

RTC::_pof_FsmParticipant::~_pof_FsmParticipant() {}


omniObjRef*
RTC::_pof_FsmParticipant::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_FsmParticipant(ior, id);
}


::CORBA::Boolean
RTC::_pof_FsmParticipant::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::FsmParticipant::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::LightweightRTObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::FsmParticipantAction::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_FsmParticipant _the_pof_RTC_mFsmParticipant;

RTC::_impl_FsmParticipant::~_impl_FsmParticipant() {}


::CORBA::Boolean
RTC::_impl_FsmParticipant::_dispatch(omniCallHandle& _handle)
{
  

  
#ifndef _MSC_VER
  if( _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LightweightRTObject*)this)->
      _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_FsmParticipantAction::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_FsmParticipantAction*)this)->
      _impl_FsmParticipantAction::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_FsmParticipant::_ptrToInterface(const char* id)
{
  if( id == ::RTC::FsmParticipant::_PD_repoId )
    return (::RTC::_impl_FsmParticipant*) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( id == ::RTC::FsmParticipantAction::_PD_repoId )
    return (::RTC::_impl_FsmParticipantAction*) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::FsmParticipant::_PD_repoId) )
    return (::RTC::_impl_FsmParticipant*) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( omni::strMatch(id, ::RTC::FsmParticipantAction::_PD_repoId) )
    return (::RTC::_impl_FsmParticipantAction*) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_FsmParticipant::_mostDerivedRepoId()
{
  return ::RTC::FsmParticipant::_PD_repoId;
}

RTC::Mode_ptr RTC::Mode_Helper::_nil() {
  return ::RTC::Mode::_nil();
}

::CORBA::Boolean RTC::Mode_Helper::is_nil(::RTC::Mode_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::Mode_Helper::release(::RTC::Mode_ptr p) {
  ::CORBA::release(p);
}

void RTC::Mode_Helper::marshalObjRef(::RTC::Mode_ptr obj, cdrStream& s) {
  ::RTC::Mode::_marshalObjRef(obj, s);
}

RTC::Mode_ptr RTC::Mode_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::Mode::_unmarshalObjRef(s);
}

void RTC::Mode_Helper::duplicate(::RTC::Mode_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::Mode_ptr
RTC::Mode::_duplicate(::RTC::Mode_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::Mode_ptr
RTC::Mode::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::Mode_ptr
RTC::Mode::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::Mode_ptr
RTC::Mode::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Mode _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Mode* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Mode;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::Mode::_PD_repoId = "IDL:omg.org/RTC/Mode:1.0";


RTC::_objref_Mode::~_objref_Mode() {
  
}


RTC::_objref_Mode::_objref_Mode(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::Mode::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_Mode::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::Mode::_PD_repoId )
    return (::RTC::Mode_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::Mode::_PD_repoId) )
    return (::RTC::Mode_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

RTC::_pof_Mode::~_pof_Mode() {}


omniObjRef*
RTC::_pof_Mode::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_Mode(ior, id);
}


::CORBA::Boolean
RTC::_pof_Mode::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::Mode::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_Mode _the_pof_RTC_mMode;

RTC::_impl_Mode::~_impl_Mode() {}


::CORBA::Boolean
RTC::_impl_Mode::_dispatch(omniCallHandle& _handle)
{
  

  
  return 0;
}

void*
RTC::_impl_Mode::_ptrToInterface(const char* id)
{
  if( id == ::RTC::Mode::_PD_repoId )
    return (::RTC::_impl_Mode*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::Mode::_PD_repoId) )
    return (::RTC::_impl_Mode*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_Mode::_mostDerivedRepoId()
{
  return ::RTC::Mode::_PD_repoId;
}

RTC::ModeCapable_ptr RTC::ModeCapable_Helper::_nil() {
  return ::RTC::ModeCapable::_nil();
}

::CORBA::Boolean RTC::ModeCapable_Helper::is_nil(::RTC::ModeCapable_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::ModeCapable_Helper::release(::RTC::ModeCapable_ptr p) {
  ::CORBA::release(p);
}

void RTC::ModeCapable_Helper::marshalObjRef(::RTC::ModeCapable_ptr obj, cdrStream& s) {
  ::RTC::ModeCapable::_marshalObjRef(obj, s);
}

RTC::ModeCapable_ptr RTC::ModeCapable_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::ModeCapable::_unmarshalObjRef(s);
}

void RTC::ModeCapable_Helper::duplicate(::RTC::ModeCapable_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::ModeCapable_ptr
RTC::ModeCapable::_duplicate(::RTC::ModeCapable_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::ModeCapable_ptr
RTC::ModeCapable::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::ModeCapable_ptr
RTC::ModeCapable::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::ModeCapable_ptr
RTC::ModeCapable::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeCapable _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeCapable* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModeCapable;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::ModeCapable::_PD_repoId = "IDL:omg.org/RTC/ModeCapable:1.0";


RTC::_objref_ModeCapable::~_objref_ModeCapable() {
  
}


RTC::_objref_ModeCapable::_objref_ModeCapable(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::ModeCapable::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_ModeCapable::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::ModeCapable::_PD_repoId )
    return (::RTC::ModeCapable_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::ModeCapable::_PD_repoId) )
    return (::RTC::ModeCapable_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mMode
class _0RL_cd_bf82f9885dac07a6_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_f2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::Mode_var result;
};

void _0RL_cd_bf82f9885dac07a6_f2000000::marshalReturnedValues(cdrStream& _n)
{
  RTC::Mode::_marshalObjRef(result,_n);

}

void _0RL_cd_bf82f9885dac07a6_f2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = RTC::Mode::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_bf82f9885dac07a6_f2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_f2000000* tcd = (_0RL_cd_bf82f9885dac07a6_f2000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->get_default_mode();


}

RTC::Mode_ptr RTC::_objref_ModeCapable::get_default_mode()
{
  _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_03000000, "get_default_mode", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_f2000000* tcd = (_0RL_cd_bf82f9885dac07a6_f2000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->get_current_mode();


}

RTC::Mode_ptr RTC::_objref_ModeCapable::get_current_mode()
{
  _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_13000000, "get_current_mode", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mMode_i_cRTC_mExecutionContext
class _0RL_cd_bf82f9885dac07a6_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_23000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContext_var arg_0_;
  RTC::ExecutionContext_ptr arg_0;
  RTC::Mode_var result;
};

void _0RL_cd_bf82f9885dac07a6_23000000::marshalArguments(cdrStream& _n)
{
  RTC::ExecutionContext_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_bf82f9885dac07a6_23000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::ExecutionContext_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_23000000::marshalReturnedValues(cdrStream& _n)
{
  RTC::Mode::_marshalObjRef(result,_n);

}

void _0RL_cd_bf82f9885dac07a6_23000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = RTC::Mode::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_bf82f9885dac07a6_23000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_23000000* tcd = (_0RL_cd_bf82f9885dac07a6_23000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->get_current_mode_in_context(tcd->arg_0);


}

RTC::Mode_ptr RTC::_objref_ModeCapable::get_current_mode_in_context(::RTC::ExecutionContext_ptr exec_context)
{
  _0RL_cd_bf82f9885dac07a6_23000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_33000000, "get_current_mode_in_context", 28);
  _call_desc.arg_0 = exec_context;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_f2000000* tcd = (_0RL_cd_bf82f9885dac07a6_f2000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->get_pending_mode();


}

RTC::Mode_ptr RTC::_objref_ModeCapable::get_pending_mode()
{
  _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_43000000, "get_pending_mode", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_23000000* tcd = (_0RL_cd_bf82f9885dac07a6_23000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->get_pending_mode_in_context(tcd->arg_0);


}

RTC::Mode_ptr RTC::_objref_ModeCapable::get_pending_mode_in_context(::RTC::ExecutionContext_ptr exec_context)
{
  _0RL_cd_bf82f9885dac07a6_23000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_53000000, "get_pending_mode_in_context", 28);
  _call_desc.arg_0 = exec_context;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cRTC_mMode_i_cboolean
class _0RL_cd_bf82f9885dac07a6_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_63000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::Mode_var arg_0_;
  RTC::Mode_ptr arg_0;
  ::CORBA::Boolean arg_1;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_63000000::marshalArguments(cdrStream& _n)
{
  RTC::Mode::_marshalObjRef(arg_0,_n);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_bf82f9885dac07a6_63000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = RTC::Mode::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_bf82f9885dac07a6_63000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_63000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_63000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_63000000* tcd = (_0RL_cd_bf82f9885dac07a6_63000000*)cd;
  RTC::_impl_ModeCapable* impl = (RTC::_impl_ModeCapable*) svnt->_ptrToInterface(RTC::ModeCapable::_PD_repoId);
  tcd->result = impl->set_mode(tcd->arg_0, tcd->arg_1);


}

RTC::ReturnCode_t RTC::_objref_ModeCapable::set_mode(::RTC::Mode_ptr new_mode, ::CORBA::Boolean immediate)
{
  _0RL_cd_bf82f9885dac07a6_63000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_73000000, "set_mode", 9);
  _call_desc.arg_0 = new_mode;
  _call_desc.arg_1 = immediate;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_ModeCapable::~_pof_ModeCapable() {}


omniObjRef*
RTC::_pof_ModeCapable::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_ModeCapable(ior, id);
}


::CORBA::Boolean
RTC::_pof_ModeCapable::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::ModeCapable::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_ModeCapable _the_pof_RTC_mModeCapable;

RTC::_impl_ModeCapable::~_impl_ModeCapable() {}


::CORBA::Boolean
RTC::_impl_ModeCapable::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_default_mode") ) {

    _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_03000000, "get_default_mode", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_current_mode") ) {

    _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_13000000, "get_current_mode", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_current_mode_in_context") ) {

    _0RL_cd_bf82f9885dac07a6_23000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_33000000, "get_current_mode_in_context", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_pending_mode") ) {

    _0RL_cd_bf82f9885dac07a6_f2000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_43000000, "get_pending_mode", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_pending_mode_in_context") ) {

    _0RL_cd_bf82f9885dac07a6_23000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_53000000, "get_pending_mode_in_context", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_mode") ) {

    _0RL_cd_bf82f9885dac07a6_63000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_73000000, "set_mode", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_ModeCapable::_ptrToInterface(const char* id)
{
  if( id == ::RTC::ModeCapable::_PD_repoId )
    return (::RTC::_impl_ModeCapable*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::ModeCapable::_PD_repoId) )
    return (::RTC::_impl_ModeCapable*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_ModeCapable::_mostDerivedRepoId()
{
  return ::RTC::ModeCapable::_PD_repoId;
}

RTC::MultiModeComponentAction_ptr RTC::MultiModeComponentAction_Helper::_nil() {
  return ::RTC::MultiModeComponentAction::_nil();
}

::CORBA::Boolean RTC::MultiModeComponentAction_Helper::is_nil(::RTC::MultiModeComponentAction_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::MultiModeComponentAction_Helper::release(::RTC::MultiModeComponentAction_ptr p) {
  ::CORBA::release(p);
}

void RTC::MultiModeComponentAction_Helper::marshalObjRef(::RTC::MultiModeComponentAction_ptr obj, cdrStream& s) {
  ::RTC::MultiModeComponentAction::_marshalObjRef(obj, s);
}

RTC::MultiModeComponentAction_ptr RTC::MultiModeComponentAction_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::MultiModeComponentAction::_unmarshalObjRef(s);
}

void RTC::MultiModeComponentAction_Helper::duplicate(::RTC::MultiModeComponentAction_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::MultiModeComponentAction_ptr
RTC::MultiModeComponentAction::_duplicate(::RTC::MultiModeComponentAction_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::MultiModeComponentAction_ptr
RTC::MultiModeComponentAction::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::MultiModeComponentAction_ptr
RTC::MultiModeComponentAction::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::MultiModeComponentAction_ptr
RTC::MultiModeComponentAction::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_MultiModeComponentAction _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_MultiModeComponentAction* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_MultiModeComponentAction;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::MultiModeComponentAction::_PD_repoId = "IDL:omg.org/RTC/MultiModeComponentAction:1.0";


RTC::_objref_MultiModeComponentAction::~_objref_MultiModeComponentAction() {
  
}


RTC::_objref_MultiModeComponentAction::_objref_MultiModeComponentAction(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::MultiModeComponentAction::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_MultiModeComponentAction::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::MultiModeComponentAction::_PD_repoId )
    return (::RTC::MultiModeComponentAction_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::MultiModeComponentAction::_PD_repoId) )
    return (::RTC::MultiModeComponentAction_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_83000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_30000000* tcd = (_0RL_cd_bf82f9885dac07a6_30000000*)cd;
  RTC::_impl_MultiModeComponentAction* impl = (RTC::_impl_MultiModeComponentAction*) svnt->_ptrToInterface(RTC::MultiModeComponentAction::_PD_repoId);
  tcd->result = impl->on_mode_changed(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_MultiModeComponentAction::on_mode_changed(::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_83000000, "on_mode_changed", 16);
  _call_desc.arg_0 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_MultiModeComponentAction::~_pof_MultiModeComponentAction() {}


omniObjRef*
RTC::_pof_MultiModeComponentAction::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_MultiModeComponentAction(ior, id);
}


::CORBA::Boolean
RTC::_pof_MultiModeComponentAction::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::MultiModeComponentAction::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_MultiModeComponentAction _the_pof_RTC_mMultiModeComponentAction;

RTC::_impl_MultiModeComponentAction::~_impl_MultiModeComponentAction() {}


::CORBA::Boolean
RTC::_impl_MultiModeComponentAction::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "on_mode_changed") ) {

    _0RL_cd_bf82f9885dac07a6_30000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_83000000, "on_mode_changed", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_MultiModeComponentAction::_ptrToInterface(const char* id)
{
  if( id == ::RTC::MultiModeComponentAction::_PD_repoId )
    return (::RTC::_impl_MultiModeComponentAction*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::MultiModeComponentAction::_PD_repoId) )
    return (::RTC::_impl_MultiModeComponentAction*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_MultiModeComponentAction::_mostDerivedRepoId()
{
  return ::RTC::MultiModeComponentAction::_PD_repoId;
}

RTC::MultiModeObject_ptr RTC::MultiModeObject_Helper::_nil() {
  return ::RTC::MultiModeObject::_nil();
}

::CORBA::Boolean RTC::MultiModeObject_Helper::is_nil(::RTC::MultiModeObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::MultiModeObject_Helper::release(::RTC::MultiModeObject_ptr p) {
  ::CORBA::release(p);
}

void RTC::MultiModeObject_Helper::marshalObjRef(::RTC::MultiModeObject_ptr obj, cdrStream& s) {
  ::RTC::MultiModeObject::_marshalObjRef(obj, s);
}

RTC::MultiModeObject_ptr RTC::MultiModeObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::MultiModeObject::_unmarshalObjRef(s);
}

void RTC::MultiModeObject_Helper::duplicate(::RTC::MultiModeObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::MultiModeObject_ptr
RTC::MultiModeObject::_duplicate(::RTC::MultiModeObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::MultiModeObject_ptr
RTC::MultiModeObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::MultiModeObject_ptr
RTC::MultiModeObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::MultiModeObject_ptr
RTC::MultiModeObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_MultiModeObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_MultiModeObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_MultiModeObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::MultiModeObject::_PD_repoId = "IDL:omg.org/RTC/MultiModeObject:1.0";


RTC::_objref_MultiModeObject::~_objref_MultiModeObject() {
  
}


RTC::_objref_MultiModeObject::_objref_MultiModeObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::MultiModeObject::_PD_repoId, ior, id, 1),
   _objref_LightweightRTObject(ior, id),
   _objref_ModeCapable(ior, id),
   _objref_MultiModeComponentAction(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_MultiModeObject::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::MultiModeObject::_PD_repoId )
    return (::RTC::MultiModeObject_ptr) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;

  if( id == ::RTC::ModeCapable::_PD_repoId )
    return (::RTC::ModeCapable_ptr) this;

  if( id == ::RTC::MultiModeComponentAction::_PD_repoId )
    return (::RTC::MultiModeComponentAction_ptr) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::MultiModeObject::_PD_repoId) )
    return (::RTC::MultiModeObject_ptr) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;

  if( omni::strMatch(id, ::RTC::ModeCapable::_PD_repoId) )
    return (::RTC::ModeCapable_ptr) this;

  if( omni::strMatch(id, ::RTC::MultiModeComponentAction::_PD_repoId) )
    return (::RTC::MultiModeComponentAction_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

RTC::_pof_MultiModeObject::~_pof_MultiModeObject() {}


omniObjRef*
RTC::_pof_MultiModeObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_MultiModeObject(ior, id);
}


::CORBA::Boolean
RTC::_pof_MultiModeObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::MultiModeObject::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::LightweightRTObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ModeCapable::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::MultiModeComponentAction::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_MultiModeObject _the_pof_RTC_mMultiModeObject;

RTC::_impl_MultiModeObject::~_impl_MultiModeObject() {}


::CORBA::Boolean
RTC::_impl_MultiModeObject::_dispatch(omniCallHandle& _handle)
{
  

  
#ifndef _MSC_VER
  if( _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LightweightRTObject*)this)->
      _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_ModeCapable::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ModeCapable*)this)->
      _impl_ModeCapable::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_MultiModeComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_MultiModeComponentAction*)this)->
      _impl_MultiModeComponentAction::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_MultiModeObject::_ptrToInterface(const char* id)
{
  if( id == ::RTC::MultiModeObject::_PD_repoId )
    return (::RTC::_impl_MultiModeObject*) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( id == ::RTC::ModeCapable::_PD_repoId )
    return (::RTC::_impl_ModeCapable*) this;

  if( id == ::RTC::MultiModeComponentAction::_PD_repoId )
    return (::RTC::_impl_MultiModeComponentAction*) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::MultiModeObject::_PD_repoId) )
    return (::RTC::_impl_MultiModeObject*) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( omni::strMatch(id, ::RTC::ModeCapable::_PD_repoId) )
    return (::RTC::_impl_ModeCapable*) this;

  if( omni::strMatch(id, ::RTC::MultiModeComponentAction::_PD_repoId) )
    return (::RTC::_impl_MultiModeComponentAction*) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_MultiModeObject::_mostDerivedRepoId()
{
  return ::RTC::MultiModeObject::_PD_repoId;
}

void
RTC::PortInterfaceProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(instance_name,0);
  _n.marshalString(type_name,0);
  polarity >>= _n;

}

void
RTC::PortInterfaceProfile::operator<<= (cdrStream &_n)
{
  instance_name = _n.unmarshalString(0);
  type_name = _n.unmarshalString(0);
  (PortInterfacePolarity&)polarity <<= _n;

}

void
RTC::ConnectorProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  _n.marshalString(connector_id,0);
  (const PortServiceList&) ports >>= _n;
  (const NVList&) properties >>= _n;

}

void
RTC::ConnectorProfile::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  connector_id = _n.unmarshalString(0);
  (PortServiceList&)ports <<= _n;
  (NVList&)properties <<= _n;

}

void
RTC::PortProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const PortInterfaceProfileList&) interfaces >>= _n;
  PortService_Helper::marshalObjRef(port_ref,_n);
  (const ConnectorProfileList&) connector_profiles >>= _n;
  RTObject_Helper::marshalObjRef(owner,_n);
  (const NVList&) properties >>= _n;

}

void
RTC::PortProfile::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (PortInterfaceProfileList&)interfaces <<= _n;
  port_ref = PortService_Helper::unmarshalObjRef(_n);
  (ConnectorProfileList&)connector_profiles <<= _n;
  owner = RTObject_Helper::unmarshalObjRef(_n);
  (NVList&)properties <<= _n;

}

void
RTC::ExecutionContextProfile::operator>>= (cdrStream &_n) const
{
  kind >>= _n;
  rate >>= _n;
  RTObject_Helper::marshalObjRef(owner,_n);
  (const RTCList&) participants >>= _n;
  (const NVList&) properties >>= _n;

}

void
RTC::ExecutionContextProfile::operator<<= (cdrStream &_n)
{
  (ExecutionKind&)kind <<= _n;
  (::CORBA::Double&)rate <<= _n;
  owner = RTObject_Helper::unmarshalObjRef(_n);
  (RTCList&)participants <<= _n;
  (NVList&)properties <<= _n;

}

RTC::FsmObject_ptr RTC::FsmObject_Helper::_nil() {
  return ::RTC::FsmObject::_nil();
}

::CORBA::Boolean RTC::FsmObject_Helper::is_nil(::RTC::FsmObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::FsmObject_Helper::release(::RTC::FsmObject_ptr p) {
  ::CORBA::release(p);
}

void RTC::FsmObject_Helper::marshalObjRef(::RTC::FsmObject_ptr obj, cdrStream& s) {
  ::RTC::FsmObject::_marshalObjRef(obj, s);
}

RTC::FsmObject_ptr RTC::FsmObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::FsmObject::_unmarshalObjRef(s);
}

void RTC::FsmObject_Helper::duplicate(::RTC::FsmObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::FsmObject_ptr
RTC::FsmObject::_duplicate(::RTC::FsmObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::FsmObject_ptr
RTC::FsmObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::FsmObject_ptr
RTC::FsmObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::FsmObject_ptr
RTC::FsmObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FsmObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FsmObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FsmObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::FsmObject::_PD_repoId = "IDL:omg.org/RTC/FsmObject:1.0";


RTC::_objref_FsmObject::~_objref_FsmObject() {
  
}


RTC::_objref_FsmObject::_objref_FsmObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::FsmObject::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_FsmObject::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::FsmObject::_PD_repoId )
    return (::RTC::FsmObject_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::FsmObject::_PD_repoId) )
    return (::RTC::FsmObject_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cstring_i_clong
class _0RL_cd_bf82f9885dac07a6_93000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_93000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  RTC::ExecutionContextHandle_t arg_1;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_93000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_93000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (RTC::ExecutionContextHandle_t&)arg_1 <<= _n;

}

void _0RL_cd_bf82f9885dac07a6_93000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_93000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_93000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_a3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_93000000* tcd = (_0RL_cd_bf82f9885dac07a6_93000000*)cd;
  RTC::_impl_FsmObject* impl = (RTC::_impl_FsmObject*) svnt->_ptrToInterface(RTC::FsmObject::_PD_repoId);
  tcd->result = impl->send_stimulus(tcd->arg_0, tcd->arg_1);


}

RTC::ReturnCode_t RTC::_objref_FsmObject::send_stimulus(const char* message, ::RTC::ExecutionContextHandle_t exec_handle)
{
  _0RL_cd_bf82f9885dac07a6_93000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a3000000, "send_stimulus", 14);
  _call_desc.arg_0 = message;
  _call_desc.arg_1 = exec_handle;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_FsmObject::~_pof_FsmObject() {}


omniObjRef*
RTC::_pof_FsmObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_FsmObject(ior, id);
}


::CORBA::Boolean
RTC::_pof_FsmObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::FsmObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const RTC::_pof_FsmObject _the_pof_RTC_mFsmObject;

RTC::_impl_FsmObject::~_impl_FsmObject() {}


::CORBA::Boolean
RTC::_impl_FsmObject::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "send_stimulus") ) {

    _0RL_cd_bf82f9885dac07a6_93000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a3000000, "send_stimulus", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_FsmObject::_ptrToInterface(const char* id)
{
  if( id == ::RTC::FsmObject::_PD_repoId )
    return (::RTC::_impl_FsmObject*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::FsmObject::_PD_repoId) )
    return (::RTC::_impl_FsmObject*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_FsmObject::_mostDerivedRepoId()
{
  return ::RTC::FsmObject::_PD_repoId;
}

void
RTC::FsmBehaviorProfile::operator>>= (cdrStream &_n) const
{
  FsmParticipantAction::_marshalObjRef(action_component,_n);
  _n.marshalString(id,0);

}

void
RTC::FsmBehaviorProfile::operator<<= (cdrStream &_n)
{
  action_component = FsmParticipantAction::_unmarshalObjRef(_n);
  id = _n.unmarshalString(0);

}

void
RTC::FsmProfile::operator>>= (cdrStream &_n) const
{
  (const FsmBehaviorProfileList&) behavior_profiles >>= _n;

}

void
RTC::FsmProfile::operator<<= (cdrStream &_n)
{
  (FsmBehaviorProfileList&)behavior_profiles <<= _n;

}

RTC::FsmService_ptr RTC::FsmService_Helper::_nil() {
  return ::RTC::FsmService::_nil();
}

::CORBA::Boolean RTC::FsmService_Helper::is_nil(::RTC::FsmService_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::FsmService_Helper::release(::RTC::FsmService_ptr p) {
  ::CORBA::release(p);
}

void RTC::FsmService_Helper::marshalObjRef(::RTC::FsmService_ptr obj, cdrStream& s) {
  ::RTC::FsmService::_marshalObjRef(obj, s);
}

RTC::FsmService_ptr RTC::FsmService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::FsmService::_unmarshalObjRef(s);
}

void RTC::FsmService_Helper::duplicate(::RTC::FsmService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::FsmService_ptr
RTC::FsmService::_duplicate(::RTC::FsmService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::FsmService_ptr
RTC::FsmService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::FsmService_ptr
RTC::FsmService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::FsmService_ptr
RTC::FsmService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FsmService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FsmService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FsmService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::FsmService::_PD_repoId = "IDL:omg.org/RTC/FsmService:1.0";


typedef SDOPackage::SDOService SDOPackage_SDOService;
typedef SDOPackage::_impl_SDOService SDOPackage__impl_SDOService;
typedef SDOPackage::_objref_SDOService SDOPackage__objref_SDOService;

RTC::_objref_FsmService::~_objref_FsmService() {
  
}


RTC::_objref_FsmService::_objref_FsmService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::FsmService::_PD_repoId, ior, id, 1),
   SDOPackage__objref_SDOService(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_FsmService::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::FsmService::_PD_repoId )
    return (::RTC::FsmService_ptr) this;
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::SDOService_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::FsmService::_PD_repoId) )
    return (::RTC::FsmService_ptr) this;
  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::SDOService_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mFsmProfile
class _0RL_cd_bf82f9885dac07a6_b3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_b3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::FsmProfile_var result;
};

void _0RL_cd_bf82f9885dac07a6_b3000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::FsmProfile&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_b3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::FsmProfile;
  (RTC::FsmProfile&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_b3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_c3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_b3000000* tcd = (_0RL_cd_bf82f9885dac07a6_b3000000*)cd;
  RTC::_impl_FsmService* impl = (RTC::_impl_FsmService*) svnt->_ptrToInterface(RTC::FsmService::_PD_repoId);
  tcd->result = impl->get_fsm_profile();


}

RTC::FsmProfile* RTC::_objref_FsmService::get_fsm_profile()
{
  _0RL_cd_bf82f9885dac07a6_b3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c3000000, "get_fsm_profile", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cRTC_mFsmProfile
class _0RL_cd_bf82f9885dac07a6_d3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_d3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::FsmProfile_var arg_0_;
  const RTC::FsmProfile* arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_d3000000::marshalArguments(cdrStream& _n)
{
  (const RTC::FsmProfile&) *arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_d3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new RTC::FsmProfile;
  (RTC::FsmProfile&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_d3000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_d3000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_d3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_e3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_d3000000* tcd = (_0RL_cd_bf82f9885dac07a6_d3000000*)cd;
  RTC::_impl_FsmService* impl = (RTC::_impl_FsmService*) svnt->_ptrToInterface(RTC::FsmService::_PD_repoId);
  tcd->result = impl->set_fsm_profile(*tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_FsmService::set_fsm_profile(const ::RTC::FsmProfile& fsm_profile)
{
  _0RL_cd_bf82f9885dac07a6_d3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e3000000, "set_fsm_profile", 16);
  _call_desc.arg_0 = &(::RTC::FsmProfile&) fsm_profile;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_FsmService::~_pof_FsmService() {}


omniObjRef*
RTC::_pof_FsmService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_FsmService(ior, id);
}


::CORBA::Boolean
RTC::_pof_FsmService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::FsmService::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, SDOPackage::SDOService::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_FsmService _the_pof_RTC_mFsmService;

RTC::_impl_FsmService::~_impl_FsmService() {}


::CORBA::Boolean
RTC::_impl_FsmService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_fsm_profile") ) {

    _0RL_cd_bf82f9885dac07a6_b3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_c3000000, "get_fsm_profile", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set_fsm_profile") ) {

    _0RL_cd_bf82f9885dac07a6_d3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_e3000000, "set_fsm_profile", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((SDOPackage__impl_SDOService*)this)->
      SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_FsmService::_ptrToInterface(const char* id)
{
  if( id == ::RTC::FsmService::_PD_repoId )
    return (::RTC::_impl_FsmService*) this;
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::_impl_SDOService*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::FsmService::_PD_repoId) )
    return (::RTC::_impl_FsmService*) this;
  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::_impl_SDOService*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_FsmService::_mostDerivedRepoId()
{
  return ::RTC::FsmService::_PD_repoId;
}

void
RTC::ComponentProfile::operator>>= (cdrStream &_n) const
{
  _n.marshalString(instance_name,0);
  _n.marshalString(type_name,0);
  _n.marshalString(description,0);
  _n.marshalString(version,0);
  _n.marshalString(vendor,0);
  _n.marshalString(category,0);
  (const PortProfileList&) port_profiles >>= _n;
  RTObject_Helper::marshalObjRef(parent,_n);
  (const NVList&) properties >>= _n;

}

void
RTC::ComponentProfile::operator<<= (cdrStream &_n)
{
  instance_name = _n.unmarshalString(0);
  type_name = _n.unmarshalString(0);
  description = _n.unmarshalString(0);
  version = _n.unmarshalString(0);
  vendor = _n.unmarshalString(0);
  category = _n.unmarshalString(0);
  (PortProfileList&)port_profiles <<= _n;
  parent = RTObject_Helper::unmarshalObjRef(_n);
  (NVList&)properties <<= _n;

}

RTC::PortService_ptr RTC::PortService_Helper::_nil() {
  return ::RTC::PortService::_nil();
}

::CORBA::Boolean RTC::PortService_Helper::is_nil(::RTC::PortService_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::PortService_Helper::release(::RTC::PortService_ptr p) {
  ::CORBA::release(p);
}

void RTC::PortService_Helper::marshalObjRef(::RTC::PortService_ptr obj, cdrStream& s) {
  ::RTC::PortService::_marshalObjRef(obj, s);
}

RTC::PortService_ptr RTC::PortService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::PortService::_unmarshalObjRef(s);
}

void RTC::PortService_Helper::duplicate(::RTC::PortService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::PortService_ptr
RTC::PortService::_duplicate(::RTC::PortService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::PortService_ptr
RTC::PortService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::PortService_ptr
RTC::PortService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::PortService_ptr
RTC::PortService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PortService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PortService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PortService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::PortService::_PD_repoId = "IDL:omg.org/RTC/PortService:1.0";


typedef SDOPackage::SDOService SDOPackage_SDOService;
typedef SDOPackage::_impl_SDOService SDOPackage__impl_SDOService;
typedef SDOPackage::_objref_SDOService SDOPackage__objref_SDOService;

RTC::_objref_PortService::~_objref_PortService() {
  
}


RTC::_objref_PortService::_objref_PortService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::PortService::_PD_repoId, ior, id, 1),
   SDOPackage__objref_SDOService(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_PortService::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::PortService::_PD_repoId )
    return (::RTC::PortService_ptr) this;
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::SDOService_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::PortService::_PD_repoId) )
    return (::RTC::PortService_ptr) this;
  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::SDOService_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mPortProfile
class _0RL_cd_bf82f9885dac07a6_f3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_f3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::PortProfile_var result;
};

void _0RL_cd_bf82f9885dac07a6_f3000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::PortProfile&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_f3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::PortProfile;
  (RTC::PortProfile&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_f3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_04000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_f3000000* tcd = (_0RL_cd_bf82f9885dac07a6_f3000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->get_port_profile();


}

RTC::PortProfile* RTC::_objref_PortService::get_port_profile()
{
  _0RL_cd_bf82f9885dac07a6_f3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_04000000, "get_port_profile", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mConnectorProfileList
class _0RL_cd_bf82f9885dac07a6_14000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_14000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ConnectorProfileList_var result;
};

void _0RL_cd_bf82f9885dac07a6_14000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::ConnectorProfileList&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_14000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::ConnectorProfileList;
  (RTC::ConnectorProfileList&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_14000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_24000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_14000000* tcd = (_0RL_cd_bf82f9885dac07a6_14000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->get_connector_profiles();


}

RTC::ConnectorProfileList* RTC::_objref_PortService::get_connector_profiles()
{
  _0RL_cd_bf82f9885dac07a6_14000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_24000000, "get_connector_profiles", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mConnectorProfile_i_cstring
class _0RL_cd_bf82f9885dac07a6_34000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_34000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  RTC::ConnectorProfile_var result;
};

void _0RL_cd_bf82f9885dac07a6_34000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_bf82f9885dac07a6_34000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_34000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::ConnectorProfile&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_34000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::ConnectorProfile;
  (RTC::ConnectorProfile&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_34000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_44000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_34000000* tcd = (_0RL_cd_bf82f9885dac07a6_34000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->get_connector_profile(tcd->arg_0);


}

RTC::ConnectorProfile* RTC::_objref_PortService::get_connector_profile(const char* connector_id)
{
  _0RL_cd_bf82f9885dac07a6_34000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_44000000, "get_connector_profile", 22);
  _call_desc.arg_0 = connector_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_n_cRTC_mConnectorProfile
class _0RL_cd_bf82f9885dac07a6_54000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_54000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ConnectorProfile_var arg_0_;
  RTC::ConnectorProfile* arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_54000000::marshalArguments(cdrStream& _n)
{
  (const RTC::ConnectorProfile&) *arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_54000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new RTC::ConnectorProfile;
  (RTC::ConnectorProfile&)arg_0_ <<= _n;
  arg_0 = &arg_0_.inout();

}

void _0RL_cd_bf82f9885dac07a6_54000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const RTC::ConnectorProfile&) *arg_0 >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_54000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;
  (RTC::ConnectorProfile&)*arg_0 <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_54000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_64000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_54000000* tcd = (_0RL_cd_bf82f9885dac07a6_54000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->connect(*tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_PortService::connect(::RTC::ConnectorProfile& connector_profile)
{
  _0RL_cd_bf82f9885dac07a6_54000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_64000000, "connect", 8);
  _call_desc.arg_0 = &(::RTC::ConnectorProfile&) connector_profile;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mReturnCode__t_i_cstring
class _0RL_cd_bf82f9885dac07a6_74000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_74000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  RTC::ReturnCode_t result;
};

void _0RL_cd_bf82f9885dac07a6_74000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_bf82f9885dac07a6_74000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_bf82f9885dac07a6_74000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_74000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::ReturnCode_t&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_74000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_84000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_74000000* tcd = (_0RL_cd_bf82f9885dac07a6_74000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->disconnect(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_PortService::disconnect(const char* connector_id)
{
  _0RL_cd_bf82f9885dac07a6_74000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_84000000, "disconnect", 11);
  _call_desc.arg_0 = connector_id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_00000000* tcd = (_0RL_cd_bf82f9885dac07a6_00000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->disconnect_all();


}

RTC::ReturnCode_t RTC::_objref_PortService::disconnect_all()
{
  _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_94000000, "disconnect_all", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_a4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_54000000* tcd = (_0RL_cd_bf82f9885dac07a6_54000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->notify_connect(*tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_PortService::notify_connect(::RTC::ConnectorProfile& connector_profile)
{
  _0RL_cd_bf82f9885dac07a6_54000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a4000000, "notify_connect", 15);
  _call_desc.arg_0 = &(::RTC::ConnectorProfile&) connector_profile;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_74000000* tcd = (_0RL_cd_bf82f9885dac07a6_74000000*)cd;
  RTC::_impl_PortService* impl = (RTC::_impl_PortService*) svnt->_ptrToInterface(RTC::PortService::_PD_repoId);
  tcd->result = impl->notify_disconnect(tcd->arg_0);


}

RTC::ReturnCode_t RTC::_objref_PortService::notify_disconnect(const char* connector_id)
{
  _0RL_cd_bf82f9885dac07a6_74000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b4000000, "notify_disconnect", 18);
  _call_desc.arg_0 = connector_id;

  _invoke(_call_desc);
  return _call_desc.result;


}
RTC::_pof_PortService::~_pof_PortService() {}


omniObjRef*
RTC::_pof_PortService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_PortService(ior, id);
}


::CORBA::Boolean
RTC::_pof_PortService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::PortService::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, SDOPackage::SDOService::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_PortService _the_pof_RTC_mPortService;

RTC::_impl_PortService::~_impl_PortService() {}


::CORBA::Boolean
RTC::_impl_PortService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_port_profile") ) {

    _0RL_cd_bf82f9885dac07a6_f3000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_04000000, "get_port_profile", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_connector_profiles") ) {

    _0RL_cd_bf82f9885dac07a6_14000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_24000000, "get_connector_profiles", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_connector_profile") ) {

    _0RL_cd_bf82f9885dac07a6_34000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_44000000, "get_connector_profile", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "connect") ) {

    _0RL_cd_bf82f9885dac07a6_54000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_64000000, "connect", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "disconnect") ) {

    _0RL_cd_bf82f9885dac07a6_74000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_84000000, "disconnect", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "disconnect_all") ) {

    _0RL_cd_bf82f9885dac07a6_00000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_94000000, "disconnect_all", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "notify_connect") ) {

    _0RL_cd_bf82f9885dac07a6_54000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_a4000000, "notify_connect", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "notify_disconnect") ) {

    _0RL_cd_bf82f9885dac07a6_74000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_b4000000, "notify_disconnect", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((SDOPackage__impl_SDOService*)this)->
      SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_PortService::_ptrToInterface(const char* id)
{
  if( id == ::RTC::PortService::_PD_repoId )
    return (::RTC::_impl_PortService*) this;
  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::_impl_SDOService*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::PortService::_PD_repoId) )
    return (::RTC::_impl_PortService*) this;
  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::_impl_SDOService*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_PortService::_mostDerivedRepoId()
{
  return ::RTC::PortService::_PD_repoId;
}

RTC::ExecutionContextService_ptr RTC::ExecutionContextService_Helper::_nil() {
  return ::RTC::ExecutionContextService::_nil();
}

::CORBA::Boolean RTC::ExecutionContextService_Helper::is_nil(::RTC::ExecutionContextService_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::ExecutionContextService_Helper::release(::RTC::ExecutionContextService_ptr p) {
  ::CORBA::release(p);
}

void RTC::ExecutionContextService_Helper::marshalObjRef(::RTC::ExecutionContextService_ptr obj, cdrStream& s) {
  ::RTC::ExecutionContextService::_marshalObjRef(obj, s);
}

RTC::ExecutionContextService_ptr RTC::ExecutionContextService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::ExecutionContextService::_unmarshalObjRef(s);
}

void RTC::ExecutionContextService_Helper::duplicate(::RTC::ExecutionContextService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::ExecutionContextService_ptr
RTC::ExecutionContextService::_duplicate(::RTC::ExecutionContextService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::ExecutionContextService_ptr
RTC::ExecutionContextService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::ExecutionContextService_ptr
RTC::ExecutionContextService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::ExecutionContextService_ptr
RTC::ExecutionContextService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExecutionContextService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExecutionContextService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExecutionContextService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::ExecutionContextService::_PD_repoId = "IDL:omg.org/RTC/ExecutionContextService:1.0";


typedef SDOPackage::SDOService SDOPackage_SDOService;
typedef SDOPackage::_impl_SDOService SDOPackage__impl_SDOService;
typedef SDOPackage::_objref_SDOService SDOPackage__objref_SDOService;

RTC::_objref_ExecutionContextService::~_objref_ExecutionContextService() {
  
}


RTC::_objref_ExecutionContextService::_objref_ExecutionContextService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::ExecutionContextService::_PD_repoId, ior, id, 1),
   _objref_ExecutionContext(ior, id),
   SDOPackage__objref_SDOService(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_ExecutionContextService::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::ExecutionContextService::_PD_repoId )
    return (::RTC::ExecutionContextService_ptr) this;
  if( id == ::RTC::ExecutionContext::_PD_repoId )
    return (::RTC::ExecutionContext_ptr) this;

  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::SDOService_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::ExecutionContextService::_PD_repoId) )
    return (::RTC::ExecutionContextService_ptr) this;
  if( omni::strMatch(id, ::RTC::ExecutionContext::_PD_repoId) )
    return (::RTC::ExecutionContext_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::SDOService_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mExecutionContextProfile
class _0RL_cd_bf82f9885dac07a6_c4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_c4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ExecutionContextProfile_var result;
};

void _0RL_cd_bf82f9885dac07a6_c4000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::ExecutionContextProfile&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_c4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::ExecutionContextProfile;
  (RTC::ExecutionContextProfile&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_c4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_c4000000* tcd = (_0RL_cd_bf82f9885dac07a6_c4000000*)cd;
  RTC::_impl_ExecutionContextService* impl = (RTC::_impl_ExecutionContextService*) svnt->_ptrToInterface(RTC::ExecutionContextService::_PD_repoId);
  tcd->result = impl->get_profile();


}

RTC::ExecutionContextProfile* RTC::_objref_ExecutionContextService::get_profile()
{
  _0RL_cd_bf82f9885dac07a6_c4000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_d4000000, "get_profile", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
RTC::_pof_ExecutionContextService::~_pof_ExecutionContextService() {}


omniObjRef*
RTC::_pof_ExecutionContextService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_ExecutionContextService(ior, id);
}


::CORBA::Boolean
RTC::_pof_ExecutionContextService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::ExecutionContextService::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::ExecutionContext::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, SDOPackage::SDOService::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_ExecutionContextService _the_pof_RTC_mExecutionContextService;

RTC::_impl_ExecutionContextService::~_impl_ExecutionContextService() {}


::CORBA::Boolean
RTC::_impl_ExecutionContextService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_profile") ) {

    _0RL_cd_bf82f9885dac07a6_c4000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_d4000000, "get_profile", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ExecutionContext::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ExecutionContext*)this)->
      _impl_ExecutionContext::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((SDOPackage__impl_SDOService*)this)->
      SDOPackage__impl_SDOService::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_ExecutionContextService::_ptrToInterface(const char* id)
{
  if( id == ::RTC::ExecutionContextService::_PD_repoId )
    return (::RTC::_impl_ExecutionContextService*) this;
  if( id == ::RTC::ExecutionContext::_PD_repoId )
    return (::RTC::_impl_ExecutionContext*) this;

  if( id == ::SDOPackage::SDOService::_PD_repoId )
    return (::SDOPackage::_impl_SDOService*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::ExecutionContextService::_PD_repoId) )
    return (::RTC::_impl_ExecutionContextService*) this;
  if( omni::strMatch(id, ::RTC::ExecutionContext::_PD_repoId) )
    return (::RTC::_impl_ExecutionContext*) this;

  if( omni::strMatch(id, ::SDOPackage::SDOService::_PD_repoId) )
    return (::SDOPackage::_impl_SDOService*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_ExecutionContextService::_mostDerivedRepoId()
{
  return ::RTC::ExecutionContextService::_PD_repoId;
}

RTC::RTObject_ptr RTC::RTObject_Helper::_nil() {
  return ::RTC::RTObject::_nil();
}

::CORBA::Boolean RTC::RTObject_Helper::is_nil(::RTC::RTObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::RTObject_Helper::release(::RTC::RTObject_ptr p) {
  ::CORBA::release(p);
}

void RTC::RTObject_Helper::marshalObjRef(::RTC::RTObject_ptr obj, cdrStream& s) {
  ::RTC::RTObject::_marshalObjRef(obj, s);
}

RTC::RTObject_ptr RTC::RTObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::RTObject::_unmarshalObjRef(s);
}

void RTC::RTObject_Helper::duplicate(::RTC::RTObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

RTC::RTObject_ptr
RTC::RTObject::_duplicate(::RTC::RTObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

RTC::RTObject_ptr
RTC::RTObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::RTObject_ptr
RTC::RTObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::RTObject_ptr
RTC::RTObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_RTObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_RTObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_RTObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::RTObject::_PD_repoId = "IDL:omg.org/RTC/RTObject:1.0";


typedef SDOPackage::SDO SDOPackage_SDO;
typedef SDOPackage::_impl_SDO SDOPackage__impl_SDO;
typedef SDOPackage::_objref_SDO SDOPackage__objref_SDO;

typedef SDOPackage::SDOSystemElement SDOPackage_SDOSystemElement;
typedef SDOPackage::_impl_SDOSystemElement SDOPackage__impl_SDOSystemElement;
typedef SDOPackage::_objref_SDOSystemElement SDOPackage__objref_SDOSystemElement;

RTC::_objref_RTObject::~_objref_RTObject() {
  
}


RTC::_objref_RTObject::_objref_RTObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::RTObject::_PD_repoId, ior, id, 1),
   _objref_LightweightRTObject(ior, id),
   SDOPackage__objref_SDO(ior, id)
   
{
  _PR_setobj(this);
}

void*
RTC::_objref_RTObject::_ptrToObjRef(const char* id)
{
  if( id == ::RTC::RTObject::_PD_repoId )
    return (::RTC::RTObject_ptr) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::LightweightRTObject_ptr) this;

  if( id == ::SDOPackage::SDO::_PD_repoId )
    return (::SDOPackage::SDO_ptr) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::ComponentAction_ptr) this;

  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::SDOSystemElement_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::RTC::RTObject::_PD_repoId) )
    return (::RTC::RTObject_ptr) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::LightweightRTObject_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDO::_PD_repoId) )
    return (::SDOPackage::SDO_ptr) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::ComponentAction_ptr) this;

  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::SDOSystemElement_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mComponentProfile
class _0RL_cd_bf82f9885dac07a6_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_e4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::ComponentProfile_var result;
};

void _0RL_cd_bf82f9885dac07a6_e4000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::ComponentProfile&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_e4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::ComponentProfile;
  (RTC::ComponentProfile&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_e4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_e4000000* tcd = (_0RL_cd_bf82f9885dac07a6_e4000000*)cd;
  RTC::_impl_RTObject* impl = (RTC::_impl_RTObject*) svnt->_ptrToInterface(RTC::RTObject::_PD_repoId);
  tcd->result = impl->get_component_profile();


}

RTC::ComponentProfile* RTC::_objref_RTObject::get_component_profile()
{
  _0RL_cd_bf82f9885dac07a6_e4000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_f4000000, "get_component_profile", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cRTC_mPortServiceList
class _0RL_cd_bf82f9885dac07a6_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bf82f9885dac07a6_05000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::PortServiceList_var result;
};

void _0RL_cd_bf82f9885dac07a6_05000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::PortServiceList&) result >>= _n;

}

void _0RL_cd_bf82f9885dac07a6_05000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::PortServiceList;
  (RTC::PortServiceList&)result <<= _n;

}

const char* const _0RL_cd_bf82f9885dac07a6_05000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bf82f9885dac07a6_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bf82f9885dac07a6_05000000* tcd = (_0RL_cd_bf82f9885dac07a6_05000000*)cd;
  RTC::_impl_RTObject* impl = (RTC::_impl_RTObject*) svnt->_ptrToInterface(RTC::RTObject::_PD_repoId);
  tcd->result = impl->get_ports();


}

RTC::PortServiceList* RTC::_objref_RTObject::get_ports()
{
  _0RL_cd_bf82f9885dac07a6_05000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_15000000, "get_ports", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
RTC::_pof_RTObject::~_pof_RTObject() {}


omniObjRef*
RTC::_pof_RTObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_RTObject(ior, id);
}


::CORBA::Boolean
RTC::_pof_RTObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::RTC::RTObject::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, RTC::LightweightRTObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, SDOPackage::SDO::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, RTC::ComponentAction::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, SDOPackage::SDOSystemElement::_PD_repoId) )
    return 1;


  return 0;
}

const RTC::_pof_RTObject _the_pof_RTC_mRTObject;

RTC::_impl_RTObject::~_impl_RTObject() {}


::CORBA::Boolean
RTC::_impl_RTObject::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "get_component_profile") ) {

    _0RL_cd_bf82f9885dac07a6_e4000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_f4000000, "get_component_profile", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get_ports") ) {

    _0RL_cd_bf82f9885dac07a6_05000000 _call_desc(_0RL_lcfn_bf82f9885dac07a6_15000000, "get_ports", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LightweightRTObject*)this)->
      _impl_LightweightRTObject::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( SDOPackage__impl_SDO::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((SDOPackage__impl_SDO*)this)->
      SDOPackage__impl_SDO::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
RTC::_impl_RTObject::_ptrToInterface(const char* id)
{
  if( id == ::RTC::RTObject::_PD_repoId )
    return (::RTC::_impl_RTObject*) this;
  if( id == ::RTC::LightweightRTObject::_PD_repoId )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( id == ::SDOPackage::SDO::_PD_repoId )
    return (::SDOPackage::_impl_SDO*) this;

  if( id == ::RTC::ComponentAction::_PD_repoId )
    return (::RTC::_impl_ComponentAction*) this;

  if( id == ::SDOPackage::SDOSystemElement::_PD_repoId )
    return (::SDOPackage::_impl_SDOSystemElement*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::RTC::RTObject::_PD_repoId) )
    return (::RTC::_impl_RTObject*) this;
  if( omni::strMatch(id, ::RTC::LightweightRTObject::_PD_repoId) )
    return (::RTC::_impl_LightweightRTObject*) this;

  if( omni::strMatch(id, ::SDOPackage::SDO::_PD_repoId) )
    return (::SDOPackage::_impl_SDO*) this;

  if( omni::strMatch(id, ::RTC::ComponentAction::_PD_repoId) )
    return (::RTC::_impl_ComponentAction*) this;

  if( omni::strMatch(id, ::SDOPackage::SDOSystemElement::_PD_repoId) )
    return (::SDOPackage::_impl_SDOSystemElement*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_RTObject::_mostDerivedRepoId()
{
  return ::RTC::RTObject::_PD_repoId;
}

POA_RTC::ComponentAction::~ComponentAction() {}

POA_RTC::LightweightRTObject::~LightweightRTObject() {}

POA_RTC::ExecutionContext::~ExecutionContext() {}

POA_RTC::DataFlowComponentAction::~DataFlowComponentAction() {}

POA_RTC::DataFlowComponent::~DataFlowComponent() {}

POA_RTC::Fsm::~Fsm() {}

POA_RTC::FsmParticipantAction::~FsmParticipantAction() {}

POA_RTC::FsmParticipant::~FsmParticipant() {}

POA_RTC::Mode::~Mode() {}

POA_RTC::ModeCapable::~ModeCapable() {}

POA_RTC::MultiModeComponentAction::~MultiModeComponentAction() {}

POA_RTC::MultiModeObject::~MultiModeObject() {}

POA_RTC::FsmObject::~FsmObject() {}

POA_RTC::FsmService::~FsmService() {}

POA_RTC::PortService::~PortService() {}

POA_RTC::ExecutionContextService::~ExecutionContextService() {}

POA_RTC::RTObject::~RTObject() {}

