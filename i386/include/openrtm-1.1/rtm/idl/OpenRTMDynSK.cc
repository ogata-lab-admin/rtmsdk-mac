// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "OpenRTM.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace OpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_DataFlowComponent = CORBA::TypeCode::PR_interface_tc("IDL:openrtm.aist.go.jp/OpenRTM/DataFlowComponent:1.0", "DataFlowComponent", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr OpenRTM::_tc_DataFlowComponent = CORBA::TypeCode::PR_interface_tc("IDL:openrtm.aist.go.jp/OpenRTM/DataFlowComponent:1.0", "DataFlowComponent", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace OpenRTM { 
  const ::CORBA::TypeCode_ptr _tc_ExtTrigExecutionContextService = CORBA::TypeCode::PR_interface_tc("IDL:openrtm.aist.go.jp/OpenRTM/ExtTrigExecutionContextService:1.0", "ExtTrigExecutionContextService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr OpenRTM::_tc_ExtTrigExecutionContextService = CORBA::TypeCode::PR_interface_tc("IDL:openrtm.aist.go.jp/OpenRTM/ExtTrigExecutionContextService:1.0", "ExtTrigExecutionContextService", &_0RL_tcTrack);
#endif

static void _0RL_OpenRTM_mDataFlowComponent_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_OpenRTM_mDataFlowComponent_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(OpenRTM::DataFlowComponent::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_OpenRTM_mDataFlowComponent_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, OpenRTM::DataFlowComponent_ptr _o)
{
  OpenRTM::DataFlowComponent_ptr _no = OpenRTM::DataFlowComponent::_duplicate(_o);
  _a.PR_insert(OpenRTM::_tc_DataFlowComponent,
               _0RL_OpenRTM_mDataFlowComponent_marshal_fn,
               _0RL_OpenRTM_mDataFlowComponent_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, OpenRTM::DataFlowComponent_ptr* _op)
{
  _a.PR_insert(OpenRTM::_tc_DataFlowComponent,
               _0RL_OpenRTM_mDataFlowComponent_marshal_fn,
               _0RL_OpenRTM_mDataFlowComponent_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = OpenRTM::DataFlowComponent::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::DataFlowComponent_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(OpenRTM::_tc_DataFlowComponent,
                    _0RL_OpenRTM_mDataFlowComponent_unmarshal_fn,
                    _0RL_OpenRTM_mDataFlowComponent_marshal_fn,
                    _0RL_OpenRTM_mDataFlowComponent_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (OpenRTM::DataFlowComponent_ptr)_r->_ptrToObjRef(OpenRTM::DataFlowComponent::_PD_repoId);
    else
      _o = OpenRTM::DataFlowComponent::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_OpenRTM_mExtTrigExecutionContextService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_OpenRTM_mExtTrigExecutionContextService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(OpenRTM::ExtTrigExecutionContextService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_OpenRTM_mExtTrigExecutionContextService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, OpenRTM::ExtTrigExecutionContextService_ptr _o)
{
  OpenRTM::ExtTrigExecutionContextService_ptr _no = OpenRTM::ExtTrigExecutionContextService::_duplicate(_o);
  _a.PR_insert(OpenRTM::_tc_ExtTrigExecutionContextService,
               _0RL_OpenRTM_mExtTrigExecutionContextService_marshal_fn,
               _0RL_OpenRTM_mExtTrigExecutionContextService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, OpenRTM::ExtTrigExecutionContextService_ptr* _op)
{
  _a.PR_insert(OpenRTM::_tc_ExtTrigExecutionContextService,
               _0RL_OpenRTM_mExtTrigExecutionContextService_marshal_fn,
               _0RL_OpenRTM_mExtTrigExecutionContextService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = OpenRTM::ExtTrigExecutionContextService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::ExtTrigExecutionContextService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(OpenRTM::_tc_ExtTrigExecutionContextService,
                    _0RL_OpenRTM_mExtTrigExecutionContextService_unmarshal_fn,
                    _0RL_OpenRTM_mExtTrigExecutionContextService_marshal_fn,
                    _0RL_OpenRTM_mExtTrigExecutionContextService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (OpenRTM::ExtTrigExecutionContextService_ptr)_r->_ptrToObjRef(OpenRTM::ExtTrigExecutionContextService::_PD_repoId);
    else
      _o = OpenRTM::ExtTrigExecutionContextService::_nil();
    return 1;
  }
  return 0;
}

