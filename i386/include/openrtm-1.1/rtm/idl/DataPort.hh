// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __DataPort_hh__
#define __DataPort_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenRTM

_CORBA_MODULE_BEG

  enum PortStatus { PORT_OK, PORT_ERROR, BUFFER_FULL, BUFFER_EMPTY, BUFFER_TIMEOUT, UNKNOWN_ERROR /*, __max_PortStatus=0xffffffff */ };
  typedef PortStatus& PortStatus_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PortStatus;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CdrData;

  class CdrData_var;

  class CdrData : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef CdrData_var _var_type;
    inline CdrData() {}
    inline CdrData(const CdrData& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline CdrData(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline CdrData(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline CdrData& operator = (const CdrData& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class CdrData_out;

  class CdrData_var {
  public:
    inline CdrData_var() : _pd_seq(0) {}
    inline CdrData_var(CdrData* _s) : _pd_seq(_s) {}
    inline CdrData_var(const CdrData_var& _s) {
      if( _s._pd_seq )  _pd_seq = new CdrData(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~CdrData_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline CdrData_var& operator = (CdrData* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline CdrData_var& operator = (const CdrData_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new CdrData;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline CdrData* operator -> () { return _pd_seq; }
    inline const CdrData* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator CdrData& () const { return *_pd_seq; }
#else
    inline operator const CdrData& () const { return *_pd_seq; }
    inline operator CdrData& () { return *_pd_seq; }
#endif
      
    inline const CdrData& in() const { return *_pd_seq; }
    inline CdrData&       inout()    { return *_pd_seq; }
    inline CdrData*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline CdrData* _retn() { CdrData* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class CdrData_out;
    
  private:
    CdrData* _pd_seq;
  };

  class CdrData_out {
  public:
    inline CdrData_out(CdrData*& _s) : _data(_s) { _data = 0; }
    inline CdrData_out(CdrData_var& _s)
      : _data(_s._pd_seq) { _s = (CdrData*) 0; }
    inline CdrData_out(const CdrData_out& _s) : _data(_s._data) {}
    inline CdrData_out& operator = (const CdrData_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline CdrData_out& operator = (CdrData* _s) {
      _data = _s;
      return *this;
    }
    inline operator CdrData*&()  { return _data; }
    inline CdrData*& ptr()       { return _data; }
    inline CdrData* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    CdrData*& _data;

  private:
    CdrData_out();
    CdrData_out& operator=(const CdrData_var&);
  };

#ifndef __OpenRTM_mInPortCdr__
#define __OpenRTM_mInPortCdr__

  class InPortCdr;
  class _objref_InPortCdr;
  class _impl_InPortCdr;
  
  typedef _objref_InPortCdr* InPortCdr_ptr;
  typedef InPortCdr_ptr InPortCdrRef;

  class InPortCdr_Helper {
  public:
    typedef InPortCdr_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_InPortCdr, InPortCdr_Helper> InPortCdr_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_InPortCdr,InPortCdr_Helper > InPortCdr_out;

#endif

  // interface InPortCdr
  class InPortCdr {
  public:
    // Declarations for this interface type.
    typedef InPortCdr_ptr _ptr_type;
    typedef InPortCdr_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_InPortCdr :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    PortStatus put(const ::OpenRTM::CdrData& data);

    inline _objref_InPortCdr()  { _PR_setobj(0); }  // nil
    _objref_InPortCdr(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_InPortCdr();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_InPortCdr(const _objref_InPortCdr&);
    _objref_InPortCdr& operator = (const _objref_InPortCdr&);
    // not implemented

    friend class InPortCdr;
  };

  class _pof_InPortCdr : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_InPortCdr() : _OMNI_NS(proxyObjectFactory)(InPortCdr::_PD_repoId) {}
    virtual ~_pof_InPortCdr();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_InPortCdr :
    public virtual omniServant
  {
  public:
    virtual ~_impl_InPortCdr();

    virtual PortStatus put(const ::OpenRTM::CdrData& data) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_InPortCdr;

#ifndef __OpenRTM_mOutPortCdr__
#define __OpenRTM_mOutPortCdr__

  class OutPortCdr;
  class _objref_OutPortCdr;
  class _impl_OutPortCdr;
  
  typedef _objref_OutPortCdr* OutPortCdr_ptr;
  typedef OutPortCdr_ptr OutPortCdrRef;

  class OutPortCdr_Helper {
  public:
    typedef OutPortCdr_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_OutPortCdr, OutPortCdr_Helper> OutPortCdr_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_OutPortCdr,OutPortCdr_Helper > OutPortCdr_out;

#endif

  // interface OutPortCdr
  class OutPortCdr {
  public:
    // Declarations for this interface type.
    typedef OutPortCdr_ptr _ptr_type;
    typedef OutPortCdr_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_OutPortCdr :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    PortStatus get(::OpenRTM::CdrData_out data);

    inline _objref_OutPortCdr()  { _PR_setobj(0); }  // nil
    _objref_OutPortCdr(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_OutPortCdr();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_OutPortCdr(const _objref_OutPortCdr&);
    _objref_OutPortCdr& operator = (const _objref_OutPortCdr&);
    // not implemented

    friend class OutPortCdr;
  };

  class _pof_OutPortCdr : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_OutPortCdr() : _OMNI_NS(proxyObjectFactory)(OutPortCdr::_PD_repoId) {}
    virtual ~_pof_OutPortCdr();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_OutPortCdr :
    public virtual omniServant
  {
  public:
    virtual ~_impl_OutPortCdr();

    virtual PortStatus get(::OpenRTM::CdrData_out data) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OutPortCdr;

_CORBA_MODULE_END



_CORBA_MODULE POA_OpenRTM
_CORBA_MODULE_BEG

  class InPortCdr :
    public virtual OpenRTM::_impl_InPortCdr,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~InPortCdr();

    inline ::OpenRTM::InPortCdr_ptr _this() {
      return (::OpenRTM::InPortCdr_ptr) _do_this(::OpenRTM::InPortCdr::_PD_repoId);
    }
  };

  class OutPortCdr :
    public virtual OpenRTM::_impl_OutPortCdr,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~OutPortCdr();

    inline ::OpenRTM::OutPortCdr_ptr _this() {
      return (::OpenRTM::OutPortCdr_ptr) _do_this(::OpenRTM::OutPortCdr::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenRTM
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(OpenRTM::PortStatus _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenRTM::PortStatus& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenRTM::UNKNOWN_ERROR) {
    _e = (OpenRTM::PortStatus) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, OpenRTM::PortStatus _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::PortStatus& _s);

void operator<<=(::CORBA::Any& _a, const OpenRTM::CdrData& _s);
void operator<<=(::CORBA::Any& _a, OpenRTM::CdrData* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::CdrData*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const OpenRTM::CdrData*& _sp);

void operator<<=(::CORBA::Any& _a, OpenRTM::InPortCdr_ptr _s);
void operator<<=(::CORBA::Any& _a, OpenRTM::InPortCdr_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::InPortCdr_ptr& _s);

void operator<<=(::CORBA::Any& _a, OpenRTM::OutPortCdr_ptr _s);
void operator<<=(::CORBA::Any& _a, OpenRTM::OutPortCdr_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenRTM::OutPortCdr_ptr& _s);



inline void
OpenRTM::InPortCdr::_marshalObjRef(::OpenRTM::InPortCdr_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
OpenRTM::OutPortCdr::_marshalObjRef(::OpenRTM::OutPortCdr_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_DataPort
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_DataPort
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataPort
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataPort
#endif

#endif  // __DataPort_hh__

