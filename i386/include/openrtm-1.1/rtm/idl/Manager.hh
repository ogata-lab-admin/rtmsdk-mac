// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Manager_hh__
#define __Manager_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Manager
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Manager
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Manager
#endif



#ifndef __SDOPackage_hh_EXTERNAL_GUARD__
#define __SDOPackage_hh_EXTERNAL_GUARD__
#include <SDOPackage.hh>
#endif
#ifndef __RTC_hh_EXTERNAL_GUARD__
#define __RTC_hh_EXTERNAL_GUARD__
#include <RTC.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTM

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NVList;

  typedef SDOPackage::NVList NVList;
  typedef SDOPackage::NVList_var NVList_var;
  typedef SDOPackage::NVList_out NVList_out;

  struct ModuleProfile {
    typedef _CORBA_ConstrType_Variable_Var<ModuleProfile> _var_type;

    
    NVList properties;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ModuleProfile::_var_type ModuleProfile_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ModuleProfile,ModuleProfile_var > ModuleProfile_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ModuleProfile;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ModuleProfileList;

  class ModuleProfileList_var;

  class ModuleProfileList : public _CORBA_Unbounded_Sequence< ModuleProfile >  {
  public:
    typedef ModuleProfileList_var _var_type;
    inline ModuleProfileList() {}
    inline ModuleProfileList(const ModuleProfileList& _s)
      : _CORBA_Unbounded_Sequence< ModuleProfile > (_s) {}

    inline ModuleProfileList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ModuleProfile > (_max) {}
    inline ModuleProfileList(_CORBA_ULong _max, _CORBA_ULong _len, ModuleProfile* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ModuleProfile > (_max, _len, _val, _rel) {}

  

    inline ModuleProfileList& operator = (const ModuleProfileList& _s) {
      _CORBA_Unbounded_Sequence< ModuleProfile > ::operator=(_s);
      return *this;
    }
  };

  class ModuleProfileList_out;

  class ModuleProfileList_var {
  public:
    inline ModuleProfileList_var() : _pd_seq(0) {}
    inline ModuleProfileList_var(ModuleProfileList* _s) : _pd_seq(_s) {}
    inline ModuleProfileList_var(const ModuleProfileList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ModuleProfileList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ModuleProfileList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ModuleProfileList_var& operator = (ModuleProfileList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ModuleProfileList_var& operator = (const ModuleProfileList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ModuleProfileList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ModuleProfile& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ModuleProfileList* operator -> () { return _pd_seq; }
    inline const ModuleProfileList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ModuleProfileList& () const { return *_pd_seq; }
#else
    inline operator const ModuleProfileList& () const { return *_pd_seq; }
    inline operator ModuleProfileList& () { return *_pd_seq; }
#endif
      
    inline const ModuleProfileList& in() const { return *_pd_seq; }
    inline ModuleProfileList&       inout()    { return *_pd_seq; }
    inline ModuleProfileList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ModuleProfileList* _retn() { ModuleProfileList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ModuleProfileList_out;
    
  private:
    ModuleProfileList* _pd_seq;
  };

  class ModuleProfileList_out {
  public:
    inline ModuleProfileList_out(ModuleProfileList*& _s) : _data(_s) { _data = 0; }
    inline ModuleProfileList_out(ModuleProfileList_var& _s)
      : _data(_s._pd_seq) { _s = (ModuleProfileList*) 0; }
    inline ModuleProfileList_out(const ModuleProfileList_out& _s) : _data(_s._data) {}
    inline ModuleProfileList_out& operator = (const ModuleProfileList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ModuleProfileList_out& operator = (ModuleProfileList* _s) {
      _data = _s;
      return *this;
    }
    inline operator ModuleProfileList*&()  { return _data; }
    inline ModuleProfileList*& ptr()       { return _data; }
    inline ModuleProfileList* operator->() { return _data; }

    inline ModuleProfile& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ModuleProfileList*& _data;

  private:
    ModuleProfileList_out();
    ModuleProfileList_out& operator=(const ModuleProfileList_var&);
  };

  struct ManagerProfile {
    typedef _CORBA_ConstrType_Variable_Var<ManagerProfile> _var_type;

    
    NVList properties;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ManagerProfile::_var_type ManagerProfile_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ManagerProfile,ManagerProfile_var > ManagerProfile_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ManagerProfile;

#ifndef __RTM_mManager__
#define __RTM_mManager__

  class Manager;
  class _objref_Manager;
  class _impl_Manager;
  
  typedef _objref_Manager* Manager_ptr;
  typedef Manager_ptr ManagerRef;

  class Manager_Helper {
  public:
    typedef Manager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Manager, Manager_Helper> Manager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Manager,Manager_Helper > Manager_out;

#endif

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ManagerList;

  class ManagerList_var;

  class ManagerList : public _CORBA_Unbounded_Sequence_ObjRef< _objref_Manager, _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper> , Manager_Helper >  {
  public:
    typedef ManagerList_var _var_type;
    inline ManagerList() {}
    inline ManagerList(const ManagerList& _s)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Manager, _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper> , Manager_Helper > (_s) {}

    inline ManagerList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Manager, _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper> , Manager_Helper > (_max) {}
    inline ManagerList(_CORBA_ULong _max, _CORBA_ULong _len, Manager_ptr* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Manager, _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper> , Manager_Helper > (_max, _len, _val, _rel) {}

  

    inline ManagerList& operator = (const ManagerList& _s) {
      _CORBA_Unbounded_Sequence_ObjRef< _objref_Manager, _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper> , Manager_Helper > ::operator=(_s);
      return *this;
    }
  };

  class ManagerList_out;

  class ManagerList_var {
  public:
    inline ManagerList_var() : _pd_seq(0) {}
    inline ManagerList_var(ManagerList* _s) : _pd_seq(_s) {}
    inline ManagerList_var(const ManagerList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ManagerList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ManagerList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ManagerList_var& operator = (ManagerList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ManagerList_var& operator = (const ManagerList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ManagerList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper>  operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ManagerList* operator -> () { return _pd_seq; }
    inline const ManagerList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ManagerList& () const { return *_pd_seq; }
#else
    inline operator const ManagerList& () const { return *_pd_seq; }
    inline operator ManagerList& () { return *_pd_seq; }
#endif
      
    inline const ManagerList& in() const { return *_pd_seq; }
    inline ManagerList&       inout()    { return *_pd_seq; }
    inline ManagerList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ManagerList* _retn() { ManagerList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ManagerList_out;
    
  private:
    ManagerList* _pd_seq;
  };

  class ManagerList_out {
  public:
    inline ManagerList_out(ManagerList*& _s) : _data(_s) { _data = 0; }
    inline ManagerList_out(ManagerList_var& _s)
      : _data(_s._pd_seq) { _s = (ManagerList*) 0; }
    inline ManagerList_out(const ManagerList_out& _s) : _data(_s._data) {}
    inline ManagerList_out& operator = (const ManagerList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ManagerList_out& operator = (ManagerList* _s) {
      _data = _s;
      return *this;
    }
    inline operator ManagerList*&()  { return _data; }
    inline ManagerList*& ptr()       { return _data; }
    inline ManagerList* operator->() { return _data; }

    inline _CORBA_ObjRef_Element< _objref_Manager, Manager_Helper>  operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ManagerList*& _data;

  private:
    ManagerList_out();
    ManagerList_out& operator=(const ManagerList_var&);
  };

#ifndef __RTM_mManager__
#define __RTM_mManager__

  class Manager;
  class _objref_Manager;
  class _impl_Manager;
  
  typedef _objref_Manager* Manager_ptr;
  typedef Manager_ptr ManagerRef;

  class Manager_Helper {
  public:
    typedef Manager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Manager, Manager_Helper> Manager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Manager,Manager_Helper > Manager_out;

#endif

  // interface Manager
  class Manager {
  public:
    // Declarations for this interface type.
    typedef Manager_ptr _ptr_type;
    typedef Manager_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Manager :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    RTC::ReturnCode_t load_module(const char* pathname, const char* initfunc);
    RTC::ReturnCode_t unload_module(const char* pathname);
    ModuleProfileList* get_loadable_modules();
    ModuleProfileList* get_loaded_modules();
    ModuleProfileList* get_factory_profiles();
    RTC::RTObject_ptr create_component(const char* module_name);
    RTC::ReturnCode_t delete_component(const char* instance_name);
    RTC::RTCList* get_components();
    RTC::ComponentProfileList* get_component_profiles();
    ManagerProfile* get_profile();
    NVList* get_configuration();
    RTC::ReturnCode_t set_configuration(const char* name, const char* value);
    ::CORBA::Boolean is_master();
    ManagerList* get_master_managers();
    RTC::ReturnCode_t add_master_manager(::RTM::Manager_ptr mgr);
    RTC::ReturnCode_t remove_master_manager(::RTM::Manager_ptr mgr);
    ManagerList* get_slave_managers();
    RTC::ReturnCode_t add_slave_manager(::RTM::Manager_ptr mgr);
    RTC::ReturnCode_t remove_slave_manager(::RTM::Manager_ptr mgr);
    RTC::ReturnCode_t fork();
    RTC::ReturnCode_t shutdown();
    RTC::ReturnCode_t restart();
    ::CORBA::Object_ptr get_service(const char* name);

    inline _objref_Manager()  { _PR_setobj(0); }  // nil
    _objref_Manager(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Manager();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Manager(const _objref_Manager&);
    _objref_Manager& operator = (const _objref_Manager&);
    // not implemented

    friend class Manager;
  };

  class _pof_Manager : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Manager() : _OMNI_NS(proxyObjectFactory)(Manager::_PD_repoId) {}
    virtual ~_pof_Manager();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Manager :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Manager();

    virtual RTC::ReturnCode_t load_module(const char* pathname, const char* initfunc) = 0;
    virtual RTC::ReturnCode_t unload_module(const char* pathname) = 0;
    virtual ModuleProfileList* get_loadable_modules() = 0;
    virtual ModuleProfileList* get_loaded_modules() = 0;
    virtual ModuleProfileList* get_factory_profiles() = 0;
    virtual RTC::RTObject_ptr create_component(const char* module_name) = 0;
    virtual RTC::ReturnCode_t delete_component(const char* instance_name) = 0;
    virtual RTC::RTCList* get_components() = 0;
    virtual RTC::ComponentProfileList* get_component_profiles() = 0;
    virtual ManagerProfile* get_profile() = 0;
    virtual NVList* get_configuration() = 0;
    virtual RTC::ReturnCode_t set_configuration(const char* name, const char* value) = 0;
    virtual ::CORBA::Boolean is_master() = 0;
    virtual ManagerList* get_master_managers() = 0;
    virtual RTC::ReturnCode_t add_master_manager(::RTM::Manager_ptr mgr) = 0;
    virtual RTC::ReturnCode_t remove_master_manager(::RTM::Manager_ptr mgr) = 0;
    virtual ManagerList* get_slave_managers() = 0;
    virtual RTC::ReturnCode_t add_slave_manager(::RTM::Manager_ptr mgr) = 0;
    virtual RTC::ReturnCode_t remove_slave_manager(::RTM::Manager_ptr mgr) = 0;
    virtual RTC::ReturnCode_t fork() = 0;
    virtual RTC::ReturnCode_t shutdown() = 0;
    virtual RTC::ReturnCode_t restart() = 0;
    virtual ::CORBA::Object_ptr get_service(const char* name) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Manager;

_CORBA_MODULE_END



_CORBA_MODULE POA_RTM
_CORBA_MODULE_BEG

  class Manager :
    public virtual RTM::_impl_Manager,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Manager();

    inline ::RTM::Manager_ptr _this() {
      return (::RTM::Manager_ptr) _do_this(::RTM::Manager::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTM
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const RTM::ModuleProfile& _s);
extern void operator<<=(::CORBA::Any& _a, RTM::ModuleProfile* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTM::ModuleProfile*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ModuleProfile*& _sp);

void operator<<=(::CORBA::Any& _a, const RTM::ModuleProfileList& _s);
void operator<<=(::CORBA::Any& _a, RTM::ModuleProfileList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTM::ModuleProfileList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ModuleProfileList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const RTM::ManagerProfile& _s);
extern void operator<<=(::CORBA::Any& _a, RTM::ManagerProfile* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTM::ManagerProfile*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ManagerProfile*& _sp);

void operator<<=(::CORBA::Any& _a, const RTM::ManagerList& _s);
void operator<<=(::CORBA::Any& _a, RTM::ManagerList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTM::ManagerList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ManagerList*& _sp);

void operator<<=(::CORBA::Any& _a, RTM::Manager_ptr _s);
void operator<<=(::CORBA::Any& _a, RTM::Manager_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTM::Manager_ptr& _s);



inline void
RTM::Manager::_marshalObjRef(::RTM::Manager_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Manager
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Manager
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Manager
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Manager
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Manager
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Manager
#endif

#endif  // __Manager_hh__

