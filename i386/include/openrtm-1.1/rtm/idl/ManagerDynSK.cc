// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Manager.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_SDOPackage_mNameValue[] = {
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"value", CORBA::TypeCode::PR_any_tc()}
};

#ifdef _0RL_tc_SDOPackage_mNameValue
#  undef _0RL_tc_SDOPackage_mNameValue
#endif
static CORBA::TypeCode_ptr _0RL_tc_SDOPackage_mNameValue = CORBA::TypeCode::PR_struct_tc("IDL:org.omg/SDOPackage/NameValue:1.0", "NameValue", _0RL_structmember_SDOPackage_mNameValue, 2, &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_SDOPackage_mNVList = CORBA::TypeCode::PR_alias_tc("IDL:org.omg/SDOPackage/NVList:1.0", "NVList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_SDOPackage_mNameValue, &_0RL_tcTrack), &_0RL_tcTrack);




static CORBA::TypeCode_ptr _0RL_tc_RTM_mNVList = CORBA::TypeCode::PR_alias_tc("IDL:RTM/NVList:1.0", "NVList", _0RL_tc_SDOPackage_mNVList, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_NVList = _0RL_tc_RTM_mNVList;
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_NVList = _0RL_tc_RTM_mNVList;
#endif


static CORBA::PR_structMember _0RL_structmember_RTM_mModuleProfile[] = {
  {"properties", _0RL_tc_RTM_mNVList}
};

#ifdef _0RL_tc_RTM_mModuleProfile
#  undef _0RL_tc_RTM_mModuleProfile
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTM_mModuleProfile = CORBA::TypeCode::PR_struct_tc("IDL:RTM/ModuleProfile:1.0", "ModuleProfile", _0RL_structmember_RTM_mModuleProfile, 1, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_ModuleProfile = _0RL_tc_RTM_mModuleProfile;
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_ModuleProfile = _0RL_tc_RTM_mModuleProfile;
#endif










static CORBA::TypeCode_ptr _0RL_tc_RTM_mModuleProfileList = CORBA::TypeCode::PR_alias_tc("IDL:RTM/ModuleProfileList:1.0", "ModuleProfileList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_RTM_mModuleProfile, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_ModuleProfileList = _0RL_tc_RTM_mModuleProfileList;
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_ModuleProfileList = _0RL_tc_RTM_mModuleProfileList;
#endif


static CORBA::PR_structMember _0RL_structmember_RTM_mManagerProfile[] = {
  {"properties", _0RL_tc_RTM_mNVList}
};

#ifdef _0RL_tc_RTM_mManagerProfile
#  undef _0RL_tc_RTM_mManagerProfile
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTM_mManagerProfile = CORBA::TypeCode::PR_struct_tc("IDL:RTM/ManagerProfile:1.0", "ManagerProfile", _0RL_structmember_RTM_mManagerProfile, 1, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_ManagerProfile = _0RL_tc_RTM_mManagerProfile;
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_ManagerProfile = _0RL_tc_RTM_mManagerProfile;
#endif


static CORBA::TypeCode_ptr _0RL_tc_RTM_mManagerList = CORBA::TypeCode::PR_alias_tc("IDL:RTM/ManagerList:1.0", "ManagerList", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_interface_tc("IDL:RTM/Manager:1.0", "Manager", &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_ManagerList = _0RL_tc_RTM_mManagerList;
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_ManagerList = _0RL_tc_RTM_mManagerList;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTM { 
  const ::CORBA::TypeCode_ptr _tc_Manager = CORBA::TypeCode::PR_interface_tc("IDL:RTM/Manager:1.0", "Manager", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr RTM::_tc_Manager = CORBA::TypeCode::PR_interface_tc("IDL:RTM/Manager:1.0", "Manager", &_0RL_tcTrack);
#endif

static void _0RL_RTM_mModuleProfile_marshal_fn(cdrStream& _s, void* _v)
{
  RTM::ModuleProfile* _p = (RTM::ModuleProfile*)_v;
  *_p >>= _s;
}
static void _0RL_RTM_mModuleProfile_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTM::ModuleProfile* _p = new RTM::ModuleProfile;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTM_mModuleProfile_destructor_fn(void* _v)
{
  RTM::ModuleProfile* _p = (RTM::ModuleProfile*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTM::ModuleProfile& _s)
{
  RTM::ModuleProfile* _p = new RTM::ModuleProfile(_s);
  _a.PR_insert(_0RL_tc_RTM_mModuleProfile,
               _0RL_RTM_mModuleProfile_marshal_fn,
               _0RL_RTM_mModuleProfile_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTM::ModuleProfile* _sp)
{
  _a.PR_insert(_0RL_tc_RTM_mModuleProfile,
               _0RL_RTM_mModuleProfile_marshal_fn,
               _0RL_RTM_mModuleProfile_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTM::ModuleProfile*& _sp)
{
  return _a >>= (const RTM::ModuleProfile*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ModuleProfile*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTM_mModuleProfile,
                    _0RL_RTM_mModuleProfile_unmarshal_fn,
                    _0RL_RTM_mModuleProfile_marshal_fn,
                    _0RL_RTM_mModuleProfile_destructor_fn,
                    _v)) {
    _sp = (const RTM::ModuleProfile*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_RTM_mModuleProfileList_marshal_fn(cdrStream& _s, void* _v)
{
  RTM::ModuleProfileList* _p = (RTM::ModuleProfileList*)_v;
  *_p >>= _s;
}
static void _0RL_RTM_mModuleProfileList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTM::ModuleProfileList* _p = new RTM::ModuleProfileList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTM_mModuleProfileList_destructor_fn(void* _v)
{
  RTM::ModuleProfileList* _p = (RTM::ModuleProfileList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTM::ModuleProfileList& _s)
{
  RTM::ModuleProfileList* _p = new RTM::ModuleProfileList(_s);
  _a.PR_insert(_0RL_tc_RTM_mModuleProfileList,
               _0RL_RTM_mModuleProfileList_marshal_fn,
               _0RL_RTM_mModuleProfileList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTM::ModuleProfileList* _sp)
{
  _a.PR_insert(_0RL_tc_RTM_mModuleProfileList,
               _0RL_RTM_mModuleProfileList_marshal_fn,
               _0RL_RTM_mModuleProfileList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTM::ModuleProfileList*& _sp)
{
  return _a >>= (const RTM::ModuleProfileList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ModuleProfileList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTM_mModuleProfileList,
                    _0RL_RTM_mModuleProfileList_unmarshal_fn,
                    _0RL_RTM_mModuleProfileList_marshal_fn,
                    _0RL_RTM_mModuleProfileList_destructor_fn,
                    _v)) {
    _sp = (const RTM::ModuleProfileList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_RTM_mManagerProfile_marshal_fn(cdrStream& _s, void* _v)
{
  RTM::ManagerProfile* _p = (RTM::ManagerProfile*)_v;
  *_p >>= _s;
}
static void _0RL_RTM_mManagerProfile_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTM::ManagerProfile* _p = new RTM::ManagerProfile;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTM_mManagerProfile_destructor_fn(void* _v)
{
  RTM::ManagerProfile* _p = (RTM::ManagerProfile*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTM::ManagerProfile& _s)
{
  RTM::ManagerProfile* _p = new RTM::ManagerProfile(_s);
  _a.PR_insert(_0RL_tc_RTM_mManagerProfile,
               _0RL_RTM_mManagerProfile_marshal_fn,
               _0RL_RTM_mManagerProfile_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTM::ManagerProfile* _sp)
{
  _a.PR_insert(_0RL_tc_RTM_mManagerProfile,
               _0RL_RTM_mManagerProfile_marshal_fn,
               _0RL_RTM_mManagerProfile_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTM::ManagerProfile*& _sp)
{
  return _a >>= (const RTM::ManagerProfile*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ManagerProfile*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTM_mManagerProfile,
                    _0RL_RTM_mManagerProfile_unmarshal_fn,
                    _0RL_RTM_mManagerProfile_marshal_fn,
                    _0RL_RTM_mManagerProfile_destructor_fn,
                    _v)) {
    _sp = (const RTM::ManagerProfile*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_RTM_mManagerList_marshal_fn(cdrStream& _s, void* _v)
{
  RTM::ManagerList* _p = (RTM::ManagerList*)_v;
  *_p >>= _s;
}
static void _0RL_RTM_mManagerList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTM::ManagerList* _p = new RTM::ManagerList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTM_mManagerList_destructor_fn(void* _v)
{
  RTM::ManagerList* _p = (RTM::ManagerList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTM::ManagerList& _s)
{
  RTM::ManagerList* _p = new RTM::ManagerList(_s);
  _a.PR_insert(_0RL_tc_RTM_mManagerList,
               _0RL_RTM_mManagerList_marshal_fn,
               _0RL_RTM_mManagerList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTM::ManagerList* _sp)
{
  _a.PR_insert(_0RL_tc_RTM_mManagerList,
               _0RL_RTM_mManagerList_marshal_fn,
               _0RL_RTM_mManagerList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTM::ManagerList*& _sp)
{
  return _a >>= (const RTM::ManagerList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTM::ManagerList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTM_mManagerList,
                    _0RL_RTM_mManagerList_unmarshal_fn,
                    _0RL_RTM_mManagerList_marshal_fn,
                    _0RL_RTM_mManagerList_destructor_fn,
                    _v)) {
    _sp = (const RTM::ManagerList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_RTM_mManager_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_RTM_mManager_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(RTM::Manager::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_RTM_mManager_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, RTM::Manager_ptr _o)
{
  RTM::Manager_ptr _no = RTM::Manager::_duplicate(_o);
  _a.PR_insert(RTM::_tc_Manager,
               _0RL_RTM_mManager_marshal_fn,
               _0RL_RTM_mManager_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, RTM::Manager_ptr* _op)
{
  _a.PR_insert(RTM::_tc_Manager,
               _0RL_RTM_mManager_marshal_fn,
               _0RL_RTM_mManager_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = RTM::Manager::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTM::Manager_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(RTM::_tc_Manager,
                    _0RL_RTM_mManager_unmarshal_fn,
                    _0RL_RTM_mManager_marshal_fn,
                    _0RL_RTM_mManager_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (RTM::Manager_ptr)_r->_ptrToObjRef(RTM::Manager::_PD_repoId);
    else
      _o = RTM::Manager::_nil();
    return 1;
  }
  return 0;
}

